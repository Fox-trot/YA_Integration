
Функция СведенияОВнешнейОбработке() Экспорт 
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.2");
	ПараметрыРегистрации.Наименование = "YA_BACKGROUND_TASKS";
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.24";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "GET_ORDERS";
	НоваяКоманда.Идентификатор = "GET_ORDERS";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "GET_ORDERS_FINAL";
	НоваяКоманда.Идентификатор = "GET_ORDERS_FINAL";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "GET_ITEMS";
	НоваяКоманда.Идентификатор = "GET_ITEMS";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "COPY_PRICES";
	НоваяКоманда.Идентификатор = "COPY_PRICES";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "SEND_PRICES";
	НоваяКоманда.Идентификатор = "SEND_PRICES";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "COPY_SEND_PRICES";
	НоваяКоманда.Идентификатор = "COPY_SEND_PRICES";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "UPDATE_STOCK";
	НоваяКоманда.Идентификатор = "UPDATE_STOCK";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "CARDS_CREATE";
	НоваяКоманда.Идентификатор = "CARDS_CREATE";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
		
    Возврат ПараметрыРегистрации;
Конецфункции

Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения=Неопределено) Экспорт
	НастройкиУстановить(ЭтотОбъект);
	
	Если ИмяКоманды = "UPDATE_STOCK" Тогда
		UPDATE_STOCK();
	ИначеЕсли ИмяКоманды = "GET_ITEMS" Тогда
		GET_ITEMS();
	ИначеЕсли ИмяКоманды = "GET_ORDERS" Тогда
		GET_ORDERS();
	ИначеЕсли ИмяКоманды = "GET_ORDERS_FINAL" Тогда	//DRAFT_FINALIZED
		GET_ORDERS(Истина);
	ИначеЕсли ИмяКоманды = "COPY_PRICES" Тогда
		COPY_PRICELIST();
	ИначеЕсли ИмяКоманды = "SEND_PRICES" Тогда
		SEND_PRICES();
	ИначеЕсли ИмяКоманды = "COPY_SEND_PRICES" Тогда
		Если COPY_PRICELIST() Тогда
			SEND_PRICES();
		КонецЕсли;
	ИначеЕсли ИмяКоманды = "CARDS_CREATE" Тогда
		CARDS_CREATE();
	КонецЕсли;
КонецПроцедуры

#Область Канат

Функция ИнтернетМагазинЯндекс()
	Если НЕ ЗначениеЗаполнено(ИнтернетМагазин) Тогда
		НастройкиУстановить(ЭтотОбъект);
	КонецЕсли;
	Возврат ИнтернетМагазин;
КонецФункции

Процедура НастройкиУстановить(Объект) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.ИнтернетМагазин) Тогда
		Объект.ИнтернетМагазин = ИнтеграцияWB.ИнтернетМагазинЯндекс();
	КонецЕсли;
	//Если МинимальныйОстаток = 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИМ.Страна КАК Страна,
			|	ВЫБОР
			|		КОГДА ИМ.МинимальныйОстаток > 0
			|			ТОГДА ИМ.МинимальныйОстаток
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК МинимальныйОстаток,
			|	ИМ.ВидЦены КАК ВидЦены,
			|	ИМ.Язык КАК Язык,
			|	ИнтернетСклады.Ссылка КАК ИнтернетСклад,
			|	ЕСТЬNULL(Страны.Валюта, ВидыЦен.ВалютаЦены) КАК Валюта
			|ИЗ
			|	Справочник.ИнтернетМагазины КАК ИМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнтернетСклады КАК ИнтернетСклады
			|		ПО ИМ.Ссылка = ИнтернетСклады.Владелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
			|		ПО ИМ.ВидЦены = ВидыЦен.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Страны КАК Страны
			|		ПО ИМ.Страна = Страны.Ссылка
			|ГДЕ
			|	ИМ.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.ИнтернетМагазин);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, Выборка);
			//Объект.Коэффициент		= Коэффициент();
		КонецЕсли;
	//КонецЕсли;
	Объект.ВидЦеныБазис = ВидЦеныБазис();
КонецПроцедуры

Функция ДополнительныеПараметрыПолучитьЗначение(Ключ)
	Возврат Справочники.ИнтернетМагазины.ДополнительныеПараметрыПолучитьЗначение(ИнтернетМагазин, Ключ);
КонецФункции

Функция Коэффициент()
	Ответ = СтрокаВЧисло(ДополнительныеПараметрыПолучитьЗначение("exchange_rate"));
	Возврат ?(Ответ > 0, Ответ, 1.3);
КонецФункции

Функция ВидЦеныБазис()
	Если ЗначениеЗаполнено(ВидЦеныБазис) Тогда Возврат ВидЦеныБазис; КонецЕсли;
	//Возврат Справочники.ВидыЦен.НайтиПоРеквизиту("КодИсточника", ДополнительныеПараметрыПолучитьЗначение("price_base"));
	КодИсточника = ДополнительныеПараметрыПолучитьЗначение("price_base");
	Если НЕ ПустаяСтрока(КодИсточника) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.КодИсточника = &КодИсточника");
		Запрос.УстановитьПараметр("КодИсточника",	КодИсточника);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидЦеныБазис = Выборка.Ссылка;
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
КонецФункции

Функция Преобразовать(Знач Строка, Длина=8)
	Результат = "";
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Если Строка = 0 Тогда
			Для Остаток = 1 По Длина Цикл
				Результат = Результат + "0";
			КонецЦикла;
		Иначе
			Результат = ДобавитьЛидирующиеНули(МенеджерОборудованияКлиентСервер.ПреобразоватьБинарнуюСтрокуВHEX(ДобавитьЛидирующиеНули(МенеджерОборудованияКлиентСервер.ПреобразоватьЧислоВБинарнуюСтроку(Строка), 4)), Мин(8, Длина));
		КонецЕсли;
	Иначе
		ИндексСимвола = 1;
		//Строка = СокрЛП(Строка);
		Пока ИндексСимвола <= СтрДлина(Строка) Цикл
			ТекСимвол	= ДобавитьЛидирующиеНули(МенеджерОборудованияКлиентСервер.ПреобразоватьЧислоВБинарнуюСтроку(КодСимвола(Строка, ИндексСимвола)), 8);
			Результат = Результат + МенеджерОборудованияКлиентСервер.ПреобразоватьБинарнуюСтрокуВHEX(ТекСимвол);
			ИндексСимвола = ИндексСимвола + 1;
		КонецЦикла;
		Результат = ДобавитьЛидирующиеНули(Результат, Длина);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ДобавитьЛидирующиеНули(Строка, Знач ДлиннаСтроки)
	ТекстПолный = Строка;
	Если СтрДлина(ТекстПолный) < ДлиннаСтроки Тогда
		ТекстПолный = Формат(ТекстПолный, СтрШаблон("ЧЦ=%1; ЧВН=", Формат(ДлиннаСтроки, "ЧГ=0")));
	КонецЕсли;
	Возврат ТекстПолный;
КонецФункции

Функция ОшибкиПолучить(МассивДанных)
	_error = "Ошибка: ";
	
	Ошибки = МассивДанных.Получить("error");
	Если Ошибки = Неопределено Тогда
		мТест = МассивДанных.Получить("errors");
		Если ТипЗнч(мТест) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из мТест Цикл
				Если ТипЗнч(ТекЭлемент) = Тип("Соответствие") Тогда
					Ошибки = ТекЭлемент;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Ошибки) = Тип("Соответствие") Тогда
		Если Ошибки.Получить("message") <> Неопределено Тогда
			_error = СокрЛП(Ошибки.Получить("message"));
		КонецЕсли;
		Если Ошибки.Получить("code") <> Неопределено Тогда
			_error = ?(ПустаяСтрока(_error), "", _error + "; ") + "code=" + СокрЛП(Ошибки.Получить("code"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат _error;
КонецФункции
		
#КонецОбласти

#Область HTTP_HELPERS

Функция ПолучитьПараметрыАвторизации()
	СтруктураПараметров = Новый Структура("oauth_token,client_id", "", "");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Параметры.Значение) КАК Значение,
	|	Параметры.Ключ КАК Ключ
	|ИЗ
	|	Справочник.ИнтернетМагазины.ДополнительныеПараметры КАК Параметры
	|ГДЕ
	|	Параметры.Ссылка = &ИнтернетМагазин
	|	И Параметры.Ключ В(&Ключи)
	|
	|СГРУППИРОВАТЬ ПО
	|	Параметры.Ключ
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(Параметры.Значение) ЕСТЬ NULL");
	Запрос.УстановитьПараметр("ИнтернетМагазин", ИнтернетМагазинЯндекс());
	Запрос.УстановитьПараметр("Ключи", СтрРазделить("oauth_token,client_id", ","));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПараметров.Вставить(Выборка.Ключ, СокрЛП(Выборка.Значение));
	КонецЦикла;
	
	Возврат СтруктураПараметров;
КонецФункции

Функция ПолучитьЗаголовкиЗапросаHTTP(СтруктураПараметров=Неопределено) Экспорт
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = ПолучитьПараметрыАвторизации();
	КонецЕсли;
	//
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрШаблон("OAuth oauth_token=""%1"", oauth_client_id=""%2""", СтруктураПараметров.oauth_token, СтруктураПараметров.client_id));
	Ответ = Новый Структура("Заголовки", Заголовки);
	//Ответ.Вставить("Таймаут",		20);
	Возврат Ответ;
КонецФункции

Процедура ЗаписатьВЖурналРегистра(ПараметрИсточник="", Идентификатор, Статус = Ложь, ТекстОшибки = "") Экспорт
	ПараметрИсточник	= ?(ПустаяСтрока(ПараметрИсточник), ПолучитьПараметрИсточника(Идентификатор), ПараметрИсточник);
	УИДСтроки = РегистрыСведений.ИнтеграцияЖурналПроцессов.ПолучитьУИДСтрокиЖурнала(ПараметрИсточник, Идентификатор);
	
	Если УИДСтроки = Неопределено Тогда 
		РегистрыСведений.ИнтеграцияЖурналПроцессов.ЗаписатьВЖурнал(ПараметрИсточник, Идентификатор, Новый УникальныйИдентификатор, Статус, ТекстОшибки);
	Иначе 
		РегистрыСведений.ИнтеграцияЖурналПроцессов.ОбновитьЗапись(ПараметрИсточник, Идентификатор, УИДСтроки, Статус, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрИсточника(ИмяКоманды) Экспорт
	ВнешняяСистема	= ПолучитьСсылкуВнешнейСистемы();
	Параметр = РэтмайндКэш.ПолучитьПараметрПоИмяКоманды(ИмяКоманды, ВнешняяСистема);
	
	Если ЗначениеЗаполнено(Параметр) Тогда 
		Возврат Параметр;
	Иначе 
		//на всякий случай проверим запросом, может создали, ко кэшировать еще не успели!
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ИмяКоманды", ИмяКоманды);
		Запрос.УстановитьПараметр("Владелец",   ВнешняяСистема);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИнтеграцияПараметры.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ИнтеграцияПараметры КАК ИнтеграцияПараметры
		               |ГДЕ
		               |	ИнтеграцияПараметры.ИмяКоманды = &ИмяКоманды
		               |	И ИнтеграцияПараметры.Владелец = &Владелец";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Спр = Справочники.ИнтеграцияПараметры.СоздатьЭлемент();
	Спр.Наименование = ИмяКоманды;
	Спр.ИмяКоманды   = ИмяКоманды;
	Спр.Владелец     = ВнешняяСистема;
	Спр.Статус		 = Истина;
	Спр.Записать();
	
	Возврат Спр.Ссылка;
КонецФункции

Функция ПолучитьСсылкуВнешнейСистемы()
	ВнешняяСистема = Справочники.ИнтеграцияВнешниеСистемы.НайтиПоНаименованию("YA_INTEG");
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда 
		Спр = Справочники.ИнтеграцияВнешниеСистемы.СоздатьЭлемент();
		Спр.Наименование = "YA_INTEG";
		Спр.Записать();
		ВнешняяСистема = Спр.Ссылка;
	КонецЕсли;
	Возврат ВнешняяСистема;
КонецФункции

#КонецОбласти

#Область GET_ORDERS

Функция ПолучитьДатуДляОстатков(ДатаОтправки, НаНачалоДня=Ложь)
	Если НаНачалоДня Тогда
		ТекущееВремя = НачалоДня(ДатаОтправки);
		Разница = 0;
	Иначе
		ТекущееВремя = ДатаОтправки;
		Разница = ТекущееВремя - УниверсальноеВремя(ТекущееВремя);
		Разница = ?(Разница < 0, - Разница, Разница);
	КонецЕсли;
	
	Разница = Разница / 3600;
	Добавка = "%2B" + Формат(Цел(Разница), "ЧЦ=2; ЧВН=") + "%3A" + ?(Разница=Цел(Разница), "00", "30");
	//Время = Формат(ТекущееВремя, "ДФ='гггг-ММ-ддTЧЧ%3Aмм%3Aсс'");
	Время	= Формат(ТекущееВремя, "ДФ=yyyy-MM-dd") + "T"
	+ Формат(ТекущееВремя, "ДФ='HH'") + "%3A"
	+ Формат(ТекущееВремя, "ДФ='mm'") + "%3A"
	+ Формат(ТекущееВремя, "ДФ='ss'");
	Возврат (Время + Добавка);
КонецФункции

Процедура GET_ORDERS(Финал=Ложь) Экспорт
	
	ТаблицаЗаказов = ПолучитьТаблицуЗаказовИзСайта(Финал);
	
КонецПроцедуры

Функция МассивДанныхПолучить(Макет="YA_GET_ORDERS") Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПолучитьМакет(Макет).ПолучитьТекст());
	Объект = ПрочитатьJSON(ЧтениеJSON, Истина);
	Возврат Объект;
КонецФункции

// Скачиваем заказы из сайта
Функция ПолучитьТаблицуЗаказовИзСайта(Финал=Ложь) Экспорт
	ТоварыКОтгрузке = Новый Массив;
	
	Источник			= ?(Финал, "YA_GET_ORDERS_FINAL", "YA_GET_ORDERS");
	ПараметрИсточник	= ПолучитьПараметрИсточника("YA_GET_ORDERS");
	АдресРесурса		= АдресаРесурсов();									// YA_GET_ORDERS
	ДополнительныеПараметры = ПолучитьЗаголовкиЗапросаHTTP();
	Дата				= ТекущаяДатаСеанса();
	ПараметрыЗапроса	= Новый Соответствие;
	ПараметрыЗапроса.Вставить("shipment_date_from",	ПолучитьДатуДляОстатков(ТекущаяУниверсальнаяДата()));
	//ПараметрыЗапроса.Вставить("shipment_date_to",	ПолучитьДатуДляОстатков(ТекущаяУниверсальнаяДата() + 86400));
	//ПараметрыЗапроса.Вставить("fromDate",	Формат(Дата, "ДФ=dd-MM-yyyy"));
	//ПараметрыЗапроса.Вставить("toDate",		Формат(Дата + 86400, "ДФ=dd-MM-yyyy"));
	ПараметрыЗапроса.Вставить("limit",				100);
	Если Финал Тогда
		ПараметрыЗапроса.Вставить("status",				"DRAFT_FINALIZED");
	КонецЕсли;
	Драфт				= Новый Массив;
	
	СледующийТокен = "";
	Пока Истина Цикл
		Попытка
			Если ЭтоТест Тогда
				СоответствиеДанных = МассивДанныхПолучить();
			Иначе
				СоответствиеДанных = КоннекторHTTP.GetJson(АдресРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
			КонецЕсли;
		Исключение
			ЗаписатьВЖурналРегистра(ПараметрИсточник, Источник,, ОписаниеОшибки());
			Возврат Новый Массив;
		КонецПопытки;
		
		result	= СоответствиеДанных.Получить("result");
		Если ТипЗнч(result) = Тип("Соответствие") Тогда
			ТоварыКОтгрузке = result.Получить("shipmentItems");
			Для Каждого ТекЗаказ Из ТоварыКОтгрузке Цикл
				status = ВРег(ТекЗаказ.Получить("status"));
				Если status = "CANCELLED" Тогда
					ОтменитьЗаказ(ТекЗаказ);
				Иначе
					ОбработатьЗаказ(ТекЗаказ);
					Если status = "DRAFT_FINALIZED" Тогда
						ДокЗаказа = ИнтеграцияWB.ЗаказНайтиПоНомеру(ФорматНомераЗаказа(ТекЗаказ.Получить("orderId")), ИнтернетМагазин);
						Если ЗначениеЗаполнено(ДокЗаказа) Тогда
							Драфт.Добавить(ДокЗаказа);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			paging = result.Получить("paging");
			Если ТипЗнч(paging) = Тип("Соответствие") Тогда
				Токен	= paging.Получить("nextPagetoken");
				Если ПустаяСтрока(Токен) Тогда Прервать;
				ИначеЕсли СледующийТокен = Токен Тогда Прервать;
				Иначе
					СледующийТокен	= Токен;
					ПараметрыЗапроса.Вставить("page_token", СледующийТокен);
				КонецЕсли;
			Иначе
				//Токен	= "";
				Прервать;
			КонецЕсли;
			
		Иначе
			ЗаписатьВЖурналРегистра(ПараметрИсточник, Источник,, ОшибкиПолучить(СоответствиеДанных));
		    Возврат Новый Массив;
		КонецЕсли;
	КонецЦикла;
	ЗаписатьВЖурналРегистра(ПараметрИсточник, Источник, Истина, JSONМодуль.ЗаписатьJSON1(result));
	
	Если Драфт.Количество() > 0 Тогда
		КомплектЗаказов = КомплектТекущийПолучить();
		Если ЗначениеЗаполнено(КомплектЗаказов) Тогда
			Если НЕ ИнтеграцияWB.ЗакрытьСмену(КомплектЗаказов, ИнтернетМагазин, Драфт) Тогда
				ЗаписатьВЖурналРегистра(ПараметрИсточник, Источник,, СтрШаблон("Не удалось закрыть смену %1", КомплектЗаказов));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТоварыКОтгрузке;
КонецФункции

Функция КомплектТекущийПолучить()
	Возврат ИнтеграцияWB.КомплектТекущийПолучить(ИнтернетМагазин);
КонецФункции

Функция Первый(СписокШиндлера)
	Ответ = Неопределено;
	Если ТипЗнч(СписокШиндлера) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из СписокШиндлера Цикл
			Ответ = ТекЭлемент;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Процедура ОтменитьЗаказ(ТекЗаказ)
	ПараметрИсточник = ПолучитьПараметрИсточника("YA_CANCEL_ORDER");
	
	//Я_ИдентификаторТовара  = Формат(ТекЗаказ.Получить("id"), "ЧГ=0");
	Я_НомерЗаказа 		   = ФорматНомераЗаказа(ТекЗаказ.Получить("orderId"));
	Я_АйдиСтроки		   = ФорматНомераЗаказа(ТекЗаказ.Получить("id"));
	//Я_МойSKU	    	   = ТекЗаказ.Получить("shopSku");
	//Я_ДатаЗаказа		   = ПрочитатьДатуJSON(ТекЗаказ.Получить("draftDate"), ФорматДатыJSON.ISO);
	//Я_ДатаОтгрузки		   = ПрочитатьДатуJSON(ТекЗаказ.Получить("shipmentDate"), ФорматДатыJSON.ISO);
	//Я_КоличествоТовара     = ТекЗаказ.Получить("count");
	//Я_ЦенаТовара		   = ТекЗаказ.Получить("estimated-price");
	//Я_ШтрихкодТовара	   = Первый(ТекЗаказ.Получить("barcodes"));
	
	//Я_Склад = ИнтернетСкладНайти(); // СКЛАД ЯНДЕКСА
	//
	//Если Не ЗначениеЗаполнено(Я_Склад) Тогда 
	//	ЗаписатьВЖурналРегистра(ПараметрИсточник, Я_НомерЗаказа, Ложь, "не найден интернет склад яндекса");
	//	Возврат;
	//КонецЕсли;
	
	ДокЗаказа = ИнтеграцияWB.ЗаказНайтиПоНомеру(Я_НомерЗаказа, ИнтернетМагазинЯндекс());
	Если ЗначениеЗаполнено(ДокЗаказа) Тогда
		Если ДокЗаказа.Статус <> Перечисления.СтатусыЗаказовПокупателей.Закрыт
		Или НЕ ДокЗаказа.Отменено
		Тогда
			ОбъектЗаказа = ДокЗаказа.ПолучитьОбъект();
			//ОбъектЗаказа.Отменено 			= Истина;
			//ОбъектЗаказа.Статус 			= Перечисления.СтатусыЗаказовПокупателей.Закрыт;
			//ОбъектЗаказа.ОтмененМагазином	= Истина;
			
			ТекТовар = ОбъектЗаказа.Товары.Найти(Я_АйдиСтроки, "ИдентификаторСтроки");
			ТекТовар.Отменено = Истина;
			
			ОбъектЗаказа.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ФорматНомераЗаказа(Нумер)
	Возврат Формат(Нумер, "ЧГ=0");
КонецФункции

Процедура ОбработатьЗаказ(ТекЗаказ)
	ПараметрИсточник = ПолучитьПараметрИсточника("YA_CREATE_ORDER");
	
	Я_ИдентификаторТовара  = ТекЗаказ.Получить("id");
	Я_МойSKU	    	   = ТекЗаказ.Получить("shopSku");
	Я_КоличествоТовара     = ТекЗаказ.Получить("count");
	Я_ЦенаТовара		   = ТекЗаказ.Получить("estimatedPrice");		// estimatedPrice estimated-price
	//Я_ШтрихкодТовара	   = Первый(ТекЗаказ.Получить("barcodes"));
	
	ПараметрыДокумента		= Новый Структура;
	ПараметрыДокумента.Вставить("Я_НомерЗаказа",	ФорматНомераЗаказа(ТекЗаказ.Получить("orderId")));
	ПараметрыДокумента.Вставить("Я_ДатаЗаказа",		ПрочитатьДатуJSON(ТекЗаказ.Получить("draftDate"), ФорматДатыJSON.ISO));
	
	ДокЗаказа = ИнтеграцияWB.ЗаказНайтиПоНомеру(ПараметрыДокумента.Я_НомерЗаказа, ИнтернетМагазинЯндекс());
	//Если заказа нету создаем, если уже есть заказ значит еще не обработали 
	Если ЗначениеЗаполнено(ДокЗаказа) Тогда
		
		СтруктураНоменклатуры = ПолучитьДанныеТовара(Я_ИдентификаторТовара, Я_МойSKU);
		Если ЗначениеЗаполнено(СтруктураНоменклатуры.Характеристика)
		И ЗначениеЗаполнено(СтруктураНоменклатуры.Номенклатура)
		Тогда
			ОбъектЗаказ = ДокЗаказа.ПолучитьОбъект();
			Если НачалоМесяца(ОбъектЗаказ.ДатаЗаказаНаСайте) = НачалоМесяца(ПараметрыДокумента.Я_ДатаЗаказа) Тогда
				//Гугл = Новый Структура("ИдентификаторСтроки", Формат(Я_ИдентификаторТовара, "ЧГ=0"));
				//мТовары = ОбъектЗаказа.Товары.НайтиСтроки(Гугл);
				мТовары = ОбъектЗаказ.Товары.НайтиСтроки(СтруктураНоменклатуры);
				Если мТовары.Количество() = 0 Тогда
					СкладСборки = ПолучитьСкладСборки(ОбъектЗаказ.ИнтернетСклад, СтруктураНоменклатуры.Номенклатура, СтруктураНоменклатуры.Характеристика, Я_КоличествоТовара);
					Если НЕ ЗначениеЗаполнено(СкладСборки) Тогда
						ОписаниеОшибки = СтрШаблон("Остаток по товару %1 и размеру %2 не найден!", СтруктураНоменклатуры.Номенклатура.Артикул, СтруктураНоменклатуры.Характеристика);
						ОбъектЗаказ.Комментарий = ?(ПустаяСтрока(ОбъектЗаказ.Комментарий), "", ОбъектЗаказ.Комментарий + Символы.ПС) + ОписаниеОшибки;
						ЗаказЗаписать(ОбъектЗаказ, ПараметрИсточник);
						ЗаписатьВЖурналРегистра(ПараметрИсточник, ПараметрыДокумента.Я_НомерЗаказа,, ОписаниеОшибки);
						Возврат;
					КонецЕсли;
					НовТовар = ОбъектЗаказ.Товары.Добавить();
					НовТовар.Номенклатура   = СтруктураНоменклатуры.Номенклатура;
					НовТовар.Характеристика = СтруктураНоменклатуры.Характеристика;
					НовТовар.Количество     = Я_КоличествоТовара;
					НовТовар.Цена			= Я_ЦенаТовара;
					НовТовар.Сумма			= Я_ЦенаТовара * НовТовар.Количество;
					НовТовар.КоличествоУпаковок = Я_КоличествоТовара;
					
					СтавкаНДС = Справочники.Номенклатура.ПолучитьСтавкуНДСДляСтраны(СтруктураНоменклатуры.Номенклатура, ОбъектЗаказ.Страна);
					НовТовар.СтавкаНДС = СтавкаНДС;
					НовТовар.СуммаНДС	= ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(НовТовар.Сумма, СтавкаНДС, Истина);
					
					НовТовар.ИдентификаторСтроки = Формат(Я_ИдентификаторТовара, "ЧГ=0");
				КонецЕсли;
				ЗаказЗаписать(ОбъектЗаказ, ПараметрИсточник);
			КонецЕсли;
		
		Иначе	//Если НЕ ЗначениеЗаполнено(СтруктураНоменклатуры.Характеристика) Тогда
			ЗаписатьВЖурналРегистра(ПараметрИсточник, ПараметрыДокумента.Я_НомерЗаказа,, "не найден SKU=" + Я_МойSKU);
			Возврат;
		КонецЕсли;
		
		КомплектЗаказов = ИнтеграцияWB.КомплектЗаказовНайтиПоЗаказу(ДокЗаказа);
		Если НЕ ЗначениеЗаполнено(КомплектЗаказов) Тогда
			Документы.КомплектыЗаказов.ДобавитьЗаказВКомплектыЗаказов(ДокЗаказа);
		КонецЕсли;
		
	Иначе
		ПараметрыДокумента.Вставить("Я_Склад", ИнтернетСкладНайти());
		Если Не ЗначениеЗаполнено(ПараметрыДокумента.Я_Склад) Тогда
			ЗаписатьВЖурналРегистра(ПараметрИсточник, ПараметрыДокумента.Я_НомерЗаказа,, "не найден интернет склад яндекса");
			Возврат;
		КонецЕсли;
		ПараметрыДокумента.Вставить("Я_ДатаОтгрузки",	ПрочитатьДатуJSON(ТекЗаказ.Получить("shipmentDate"), ФорматДатыJSON.ISO));
		
		ТЗТовары = Новый ТаблицаЗначений(); //Номенклатура, Характеристика, Количество, Цена, rid (Идентификатор товара?)
		ТЗТовары.Колонки.Добавить("rid",		       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
		ТЗТовары.Колонки.Добавить("shopSku",	       ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 0));
		ТЗТовары.Колонки.Добавить("Цена",		       ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТЗТовары.Колонки.Добавить("Номенклатура",      Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗТовары.Колонки.Добавить("Характеристика",    Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТЗТовары.Колонки.Добавить("Количество",	  	   ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
		
		СтруктураНоменклатуры = ПолучитьДанныеТовара(Я_ИдентификаторТовара, Я_МойSKU);
		
		Если ЗначениеЗаполнено(СтруктураНоменклатуры.Характеристика)
		И ЗначениеЗаполнено(СтруктураНоменклатуры.Номенклатура)
		Тогда
			НовТовар = ТЗТовары.Добавить();
			НовТовар.rid    		= Формат(Я_ИдентификаторТовара, "ЧГ=0");
			НовТовар.shopSku 		= Я_МойSKU;
			НовТовар.Количество     = Я_КоличествоТовара;
			НовТовар.Цена           = Я_ЦенаТовара;
			НовТовар.Номенклатура   = СтруктураНоменклатуры.Номенклатура;
			НовТовар.Характеристика = СтруктураНоменклатуры.Характеристика;
			
			ЗаказСоздан = СоздатьЗаказ(ПараметрыДокумента, ТЗТовары);
			Если ТипЗнч(ЗаказСоздан) = Тип("Строка") Тогда
				ЗаписатьВЖурналРегистра(ПараметрИсточник, ПараметрыДокумента.Я_НомерЗаказа,, ЗаказСоздан);
			Иначе
				Документы.КомплектыЗаказов.ДобавитьЗаказВКомплектыЗаказов(ЗаказСоздан);
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНоменклатуры.Характеристика) Тогда
			ЗаписатьВЖурналРегистра(ПараметрИсточник, ПараметрыДокумента.Я_НомерЗаказа,, "не найден SKU=" + Я_МойSKU);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЗаказЗаписать(Заказ, ПараметрИсточник)
	Если Заказ.ПроверитьЗаполнение() Тогда
		Попытка
			Заказ.Записать();
			Возврат Истина;
		Исключение
			ЗаписатьВЖурналРегистра(ПараметрИсточник, Заказ.НомерЗаказаНаСайте,, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ИнтернетСкладНайти()
	Если ИнтернетСклад.Пустая() Тогда
		ИнтернетСклад = ИнтеграцияWB.ИнтернетСкладНайти(ИнтернетМагазинЯндекс());
	КонецЕсли;
	Возврат ИнтернетСклад;
КонецФункции

Функция СоздатьЗаказ(ПараметрыДокумента, ТаблицаТовара)
	// Одно задание = один товар всегда, из-за этого берем только первую строку.
	ТЗТолькоТовары = ТаблицаТовара.Скопировать(, "Номенклатура, Характеристика, Количество");
	//ТЗТолькоТовары.Свернуть("Номенклатура, Характеристика", "Количество");
	//
	//Если ТЗТолькоТовары.Количество() > 1 Тогда
	//	Возврат "В одном задании может быть только один товар. Проверить если это изменилось!";
	//КонецЕсли;
	
	ТекТовары 	= ТЗТолькоТовары[0];
	СкладСборки = ПолучитьСкладСборки(ПараметрыДокумента.Я_Склад, ТекТовары.Номенклатура, ТекТовары.Характеристика, ТекТовары.Количество);
	Если НЕ ЗначениеЗаполнено(СкладСборки) Тогда 
		ТекстШаблон = СтрШаблон("Остаток по товару %1 и размеру %2 не найден!", ТекТовары.Номенклатура.Артикул, ТекТовары.Характеристика.Наименование);
		Возврат ТекстШаблон;
	КонецЕсли;
	
	Док = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	Док.Дата 			    = ПараметрыДокумента.Я_ДатаЗаказа;	//	draftDate
	Док.Магазин      	    = СкладСборки.Магазин;
	Док.Склад        	    = СкладСборки;
	Док.Контрагент   	    = ИнтернетМагазин.Контрагент;
	Док.УчитыватьНДС        = Истина;
	Док.ЦенаВключаетНДС     = Истина;
	Док.Организация 	    = СкладСборки.Организация;
	Док.Страна			    = СкладСборки.Страна;
	Док.Статус				= Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
		
	Док.АдресДоставки	    = ПараметрыДокумента.Я_Склад.Адрес;
	Док.НомерЗаказаНаСайте  = ПараметрыДокумента.Я_НомерЗаказа;
	Док.ДатаЗаказаНаСайте   = ПараметрыДокумента.Я_ДатаЗаказа;
	Док.ЖелаемаяДатаПродажи = ПараметрыДокумента.Я_ДатаОтгрузки;	//	shipmentDate
	Док.ИнтернетСклад		= ПараметрыДокумента.Я_Склад;
	
	Для Каждого ТекСтрока Из ТаблицаТовара Цикл
		НовСтрока = Док.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		
		НовСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		НовСтрока.Цена				 = ТекСтрока.Цена;
		НовСтрока.Сумма				 = НовСтрока.Цена * ТекСтрока.Количество;
		
		СтавкаНДС = Справочники.Номенклатура.ПолучитьСтавкуНДСДляСтраны(ТекСтрока.Номенклатура, СкладСборки.Страна);
		НовСтрока.СтавкаНДС = СтавкаНДС;
		НовСтрока.СуммаНДС	= ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, НовСтрока.СтавкаНДС, Истина);
		
		НовСтрока.ИдентификаторСтроки = ТекСтрока.rid;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ЗаписатьСтатусЗаказа_Новый(Док.Ссылка);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Док.Ссылка;
КонецФункции

Функция ПолучитьДанныеТовара(Я_ИдентификаторТовара, Я_МойSKU)
	СтруктураОтвета = Новый Структура("Номенклатура,Характеристика");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазинЯндекс());
	Если ЗначениеЗаполнено(Я_ИдентификаторТовара) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Штриходы.Номенклатура КАК Номенклатура,
		|	Штриходы.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ИнтернетМагазинШтриходы КАК Штриходы
		|ГДЕ
		|	Штриходы.ШтрихкодИД = &ШтрихкодИД
		|	И Штриходы.ИнтернетМагазин = &ИнтернетМагазин";
		Запрос.УстановитьПараметр("ШтрихкодИД",			Я_ИдентификаторТовара);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураОтвета.Характеристика) Тогда
		Если СтрДлина(Я_МойSKU) = 13 Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Штрихкоды.Владелец КАК Номенклатура,
			|	Штрихкоды.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
			Запрос.УстановитьПараметр("Штрихкод",			Я_МойSKU);
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Штриходы.Номенклатура КАК Номенклатура,
			|	Штриходы.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.ИнтернетМагазинШтриходы КАК Штриходы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
			|		ПО Штриходы.Номенклатура = Товары.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ПО Штриходы.Характеристика = ХарактеристикиНоменклатуры.Ссылка
			|ГДЕ
			|	Штриходы.ИнтернетМагазин = &ИнтернетМагазин
			|	И Товары.Артикул = &Артикул
			|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Артикул",			Лев(Я_МойSKU, 14));
			Запрос.УстановитьПараметр("Наименование",		СтрЗаменить(Сред(Я_МойSKU, 15), "/", " "));
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, Выборка);
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураОтвета;
КонецФункции

Функция ПолучитьСкладСборки(ВБ_Склад, Номенклатура, Характеристика, КоличествоОстаток, СписокЗапрещенныхСкладов = Неопределено)
	
	Если СписокЗапрещенныхСкладов = Неопределено Тогда 
		СписокЗапрещенныхСкладов = Новый СписокЗначений;
		
		Для Каждого ТекСтр Из ИнтернетМагазин.ВнешниеСклады Цикл 
			СписокЗапрещенныхСкладов.Добавить(ТекСтр.Склад);
		КонецЦикла;
		
	КонецЕсли;
	
	СкладСборки = ПолучитьВнешнийСклад(Номенклатура, Характеристика, КоличествоОстаток, ИнтернетМагазинЯндекс());
	Если ЗначениеЗаполнено(СкладСборки) Тогда 
		Возврат СкладСборки;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СкладДоставки",     ВБ_Склад);
	Запрос.УстановитьПараметр("Номенклатура",      Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",    Характеристика);
	Запрос.УстановитьПараметр("ИнтернетМагазин",   ИнтернетМагазин);
	Запрос.УстановитьПараметр("КоличествоОстаток", КоличествоОстаток);
	Запрос.УстановитьПараметр("Дата",			   КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаНачала",		   НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаКонец",         КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Час",			   Час(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТекСклады",	   	   СписокЗапрещенныхСкладов);
	Запрос.УстановитьПараметр("Страна",			   ИнтернетМагазин.Страна);
	Запрос.УстановитьПараметр("Статус",			   Перечисления.СтатусыЗаказовПокупателей.Закрыт);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ЗаказПокупателя.Склад КАК Склад,
	               |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Заказы
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |		ПО ЗаказПокупателяТовары.Ссылка = ЗаказПокупателя.Ссылка
	               |ГДЕ
	               |	ЗаказПокупателя.Проведен
	               |	И ЗаказПокупателя.Страна = &Страна
	               |	И ЗаказПокупателя.Статус <> &Статус
	               |	И ЗаказПокупателяТовары.Номенклатура = &Номенклатура
	               |	И ЗаказПокупателяТовары.Характеристика = &Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПокупателя.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НедоступныеТоварыОстатки.Склад КАК Склад,
	               |	СУММА(НедоступныеТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ВТ_Недоступный
	               |ИЗ
	               |	РегистрНакопления.НедоступныеТовары.Остатки(
	               |			,
	               |			Номенклатура = &Номенклатура
	               |				И Характеристика = &Характеристика) КАК НедоступныеТоварыОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазины.Магазины КАК ИнтернетМагазиныМагазины
	               |		ПО НедоступныеТоварыОстатки.Склад = ИнтернетМагазиныМагазины.Склад
	               |ГДЕ
	               |	ИнтернетМагазиныМагазины.Ссылка = &ИнтернетМагазин
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НедоступныеТоварыОстатки.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИнтернетМагазиныМагазины.Склад КАК Склад,
	               |	ИнтернетМагазиныМагазины.ЛимитЗаказов КАК ЛимитЗаказов,
	               |	ИнтернетМагазиныМагазины.ПараметрыЗагрузкиЗаказов КАК ПараметрыЗагрузкиЗаказов,
	               |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ВТ_Заказы.Количество, 0) - ЕСТЬNULL(ВТ_Недоступный.КоличествоОстаток, 0)) КАК КоличествоОстаток
	               |ПОМЕСТИТЬ ВТ_ВсеОстатки
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Дата,
	               |			Номенклатура = &Номенклатура
	               |				И Характеристика = &Характеристика
	               |				И НЕ Склад В (&ТекСклады)) КАК ТоварыНаСкладахОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазины.Магазины КАК ИнтернетМагазиныМагазины
	               |		ПО ТоварыНаСкладахОстатки.Склад = ИнтернетМагазиныМагазины.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	               |		ПО ТоварыНаСкладахОстатки.Склад = ВТ_Заказы.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Недоступный КАК ВТ_Недоступный
	               |		ПО ТоварыНаСкладахОстатки.Склад = ВТ_Недоступный.Склад
	               |ГДЕ
	               |	ИнтернетМагазиныМагазины.Ссылка = &ИнтернетМагазин
	               |	И ИнтернетМагазиныМагазины.СкладДоставки = &СкладДоставки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИнтернетМагазиныМагазины.Склад,
	               |	ИнтернетМагазиныМагазины.ПараметрыЗагрузкиЗаказов,
	               |	ИнтернетМагазиныМагазины.ЛимитЗаказов
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ВТ_Заказы.Количество, 0) - ЕСТЬNULL(ВТ_Недоступный.КоличествоОстаток, 0)) >= &КоличествоОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеОстатки.Склад КАК Склад,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя.Ссылка) КАК КоличетсвоЗаказов
	               |ПОМЕСТИТЬ ВТ_ЗаказыЗаДень
	               |ИЗ
	               |	ВТ_ВсеОстатки КАК ВТ_ВсеОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнтернетСклады КАК ИнтернетСклады
	               |			ПО ЗаказПокупателя.ИнтернетСклад = ИнтернетСклады.Ссылка
	               |		ПО ВТ_ВсеОстатки.Склад = ЗаказПокупателя.Склад
	               |ГДЕ
	               |	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаКонец
	               |	И ЗаказПокупателя.Проведен
	               |	И ИнтернетСклады.Владелец = &ИнтернетМагазин
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВсеОстатки.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеОстатки.Склад КАК Склад,
	               |	ВТ_ВсеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	ВТ_ВсеОстатки.ЛимитЗаказов КАК ЛимитЗаказов,
	               |	ЕСТЬNULL(ВТ_ЗаказыЗаДень.КоличетсвоЗаказов, 0) КАК КоличетсвоЗаказов,
	               |	ВТ_ВсеОстатки.ЛимитЗаказов - ЕСТЬNULL(ВТ_ЗаказыЗаДень.КоличетсвоЗаказов, 0) КАК ОстатокЗаказовПоЛимиту
	               |ИЗ
	               |	ВТ_ВсеОстатки КАК ВТ_ВсеОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазинПараметрыЗагрузкиЗаказов КАК ИнтернетМагазинПараметрыЗагрузкиЗаказов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазинПараметрыЗагрузкиЗаказов.ВремяРаботы КАК ИнтернетМагазинПараметрыЗагрузкиЗаказовВремяРаботы
	               |			ПО ИнтернетМагазинПараметрыЗагрузкиЗаказов.Ссылка = ИнтернетМагазинПараметрыЗагрузкиЗаказовВремяРаботы.Ссылка
	               |		ПО ВТ_ВсеОстатки.ПараметрыЗагрузкиЗаказов = ИнтернетМагазинПараметрыЗагрузкиЗаказов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыЗаДень КАК ВТ_ЗаказыЗаДень
	               |		ПО ВТ_ВсеОстатки.Склад = ВТ_ЗаказыЗаДень.Склад
	               |ГДЕ
	               |	ИнтернетМагазинПараметрыЗагрузкиЗаказовВремяРаботы.Час = &Час
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КоличествоОстаток УБЫВ,
	               |	ОстатокЗаказовПоЛимиту УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ВсеОстатки.Склад КАК Склад,
	               |	ВТ_ВсеОстатки.ЛимитЗаказов КАК ЛимитЗаказов,
	               |	ВТ_ВсеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	ЕСТЬNULL(ВТ_ЗаказыЗаДень.КоличетсвоЗаказов, 0) КАК КоличетсвоЗаказов,
	               |	ВТ_ВсеОстатки.ЛимитЗаказов - ЕСТЬNULL(ВТ_ЗаказыЗаДень.КоличетсвоЗаказов, 0) КАК ОстатокЗаказовПоЛимиту,
	               |	ИнтернетМагазинПараметрыЗагрузкиЗаказов.Приоритет КАК Приоритет
	               |ИЗ
	               |	ВТ_ВсеОстатки КАК ВТ_ВсеОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыЗаДень КАК ВТ_ЗаказыЗаДень
	               |		ПО ВТ_ВсеОстатки.Склад = ВТ_ЗаказыЗаДень.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазинПараметрыЗагрузкиЗаказов КАК ИнтернетМагазинПараметрыЗагрузкиЗаказов
	               |		ПО ВТ_ВсеОстатки.ПараметрыЗагрузкиЗаказов = ИнтернетМагазинПараметрыЗагрузкиЗаказов.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет,
	               |	КоличествоОстаток УБЫВ,
	               |	ОстатокЗаказовПоЛимиту УБЫВ";
	
	
	МассивПакетов = Запрос.ВыполнитьПакет();
	
	СкладыСборки = МассивПакетов[4].Выгрузить();
	
	Если СкладыСборки.Количество() = 0 Тогда
		СкладыСборки = МассивПакетов[5].Выгрузить();
	КонецЕсли;
	
	Если СкладыСборки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СкладСборки = СкладыСборки[0].Склад;
	
	Для Каждого ТекСклад Из СкладыСборки Цикл 
		Если ТекСклад.ОстатокЗаказовПоЛимиту > 0 Тогда
			Возврат ТекСклад.Склад;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СкладСборки;
	
КонецФункции

Функция ПолучитьВнешнийСклад(Номенклатура, Характеристика, КоличествоОстаток, ИнтернетМагазин) Экспорт 
	
	Запрос= Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", 	 Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  Характеристика);
	Запрос.УстановитьПараметр("ИнтернетМагазин", ИнтернетМагазин);
	Запрос.УстановитьПараметр("КоличествоОстаток", КоличествоОстаток);
	Запрос.УстановитьПараметр("Статус",			   Перечисления.СтатусыЗаказовПокупателей.Закрыт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнтернетМагазиныВнешниеСклады.Склад КАК Склад,
	               |	ИнтернетМагазиныВнешниеСклады.Приоритет КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_Склады
	               |ИЗ
	               |	Справочник.ИнтернетМагазины.ВнешниеСклады КАК ИнтернетМагазиныВнешниеСклады
	               |ГДЕ
	               |	ИнтернетМагазиныВнешниеСклады.Ссылка = &ИнтернетМагазин
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Склады.Склад КАК Склад,
	               |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Заказазы
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
	               |			ПО ЗаказПокупателя.Склад = ВТ_Склады.Склад
	               |		ПО ЗаказПокупателяТовары.Ссылка = ЗаказПокупателя.Ссылка
	               |ГДЕ
	               |	ЗаказПокупателя.Проведен
	               |	И ЗаказПокупателя.Статус <> &Статус
	               |	И ЗаказПокупателяТовары.Номенклатура = &Номенклатура
	               |	И ЗаказПокупателяТовары.Характеристика = &Характеристика
	               |	И ЗаказПокупателя.ИнтернетСклад.Владелец = &ИнтернетМагазин
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Склады.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Склады.Склад КАК Склад,
	               |	СУММА(ИнтернетМагазинОстаткиВнешнихСкладов.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	ВТ_Склады КАК ВТ_Склады
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинОстаткиВнешнихСкладов КАК ИнтернетМагазинОстаткиВнешнихСкладов
	               |		ПО ВТ_Склады.Склад = ИнтернетМагазинОстаткиВнешнихСкладов.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказазы КАК ВТ_Заказазы
	               |		ПО ВТ_Склады.Склад = ВТ_Заказазы.Склад
	               |ГДЕ
	               |	ИнтернетМагазинОстаткиВнешнихСкладов.Характеристика = &Характеристика
	               |	И ИнтернетМагазинОстаткиВнешнихСкладов.Номенклатура = &Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Склады.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Остатки.Склад КАК Склад,
	               |	ВТ_Остатки.Количество - ЕСТЬNULL(ВТ_Заказазы.Количество, 0) КАК Количество
	               |ИЗ
	               |	ВТ_Остатки КАК ВТ_Остатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказазы КАК ВТ_Заказазы
	               |		ПО ВТ_Остатки.Склад = ВТ_Заказазы.Склад
	               |ГДЕ
	               |	ВТ_Остатки.Количество - ЕСТЬNULL(ВТ_Заказазы.Количество, 0) >= &КоличествоОстаток
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе 
		ТЗ = Результат.Выгрузить();
		Возврат ТЗ[0].Склад;
	КонецЕсли;
	
КонецФункции


Функция ДатаВФорматеXML(НужнаяДата) Экспорт 

СмещениеВСекундах = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(), НужнаяДата); 
Часов=Цел(СмещениеВСекундах/3600); 
СекОстМин= СмещениеВСекундах%3600; 
Минут=Цел(СекОстМин/60); 

Возврат Формат(НужнаяДата, "ДФ=гггг-ММ-ддTЧЧ:мм:сс")+"+"+Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=")+":"+Формат(Минут, "ЧЦ=2; ЧН=00; ЧВН="); 

КОнецФункции

Процедура ЗаписатьСтатусЗаказа_Новый(Заказ)
	Запись = РегистрыСведений.СтатусыИнтернетЗаказов.СоздатьМенеджерЗаписи();
	Запись.Документ = Заказ;
	Запись.Период 	= ТекущаяДатаСеанса();
	Запись.Статус 	= Перечисления.СтатусыИнтернетЗаказов.НовыйЗаказ;
	Запись.Склад    = Заказ.Склад;
	Запись.Записать();
КонецПроцедуры

#КонецОбласти

#Область YA_GET_ITEMS

Процедура GET_ITEMS()
	Идентификатор = "YA_GET_ITEMS";
	
	ПараметрИсточник = ПолучитьПараметрИсточника(Идентификатор);
	АдресРесурса = АдресаРесурсов(Идентификатор);
	ДополнительныеПараметры = ПолучитьЗаголовкиЗапросаHTTP();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнтернетМагазинШтриходы.Штрихкод КАК Штрихкод,
		|	ИнтернетМагазинШтриходы.ШтрихкодИД КАК ШтрихкодИД,
		|	ИнтернетМагазинШтриходы.НоменклатураИД КАК НоменклатураИД
		|ПОМЕСТИТЬ ИнтернетМагазинШтриходы
		|ИЗ
		|	&Штрихкоды КАК ИнтернетМагазинШтриходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнтернетМагазинШтриходы.ШтрихкодИД КАК ШтрихкодИД,
		|	&ИнтернетМагазин КАК ИнтернетМагазин,
		|	Штрихкоды.Характеристика КАК Характеристика,
		|	Штрихкоды.Владелец КАК Номенклатура,
		|	ИнтернетМагазинШтриходы.НоменклатураИД КАК ШтрихкодИД2
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтернетМагазинШтриходы КАК ИнтернетМагазинШтриходы
		|		ПО (Штрихкоды.Владелец.Артикул + Штрихкоды.Характеристика.Наименование = ИнтернетМагазинШтриходы.Штрихкод)
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Штрихкоды.Владелец) = ТИП(Справочник.Номенклатура)
		|	И НЕ ИнтернетМагазинШтриходы.ШтрихкодИД В
		|				(ВЫБРАТЬ
		|					Уже.ШтрихкодИД КАК ШтрихкодИД
		|				ИЗ
		|					РегистрСведений.ИнтернетМагазинШтриходы КАК Уже
		|				ГДЕ
		|					Уже.ИнтернетМагазин = &ИнтернетМагазин)");
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазинЯндекс());
	Штрихкоды = Новый ТаблицаЗначений();
	Штрихкоды.Колонки.Добавить("Штрихкод",			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	Штрихкоды.Колонки.Добавить("ШтрихкодИД",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	Штрихкоды.Колонки.Добавить("НоменклатураИД",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("limit", 200);
	//ПараметрыЗапроса.Вставить("status", "READY");
	//ПараметрыЗапроса.Вставить("availability", "ACTIVE");
	СледующийТокен = "";
	_error = "";
	Пока ПустаяСтрока(_error) Цикл
		Попытка
			Если ЭтоТест Тогда
				МассивДанных = МассивДанныхПолучить(Идентификатор);
			Иначе
				МассивДанных = КоннекторHTTP.GetJson(АдресРесурса, ПараметрыЗапроса, ДополнительныеПараметры);
			КонецЕсли;
		Исключение
			_error = ОписаниеОшибки();
			Прервать;
		КонецПопытки;
		
		Если ТипЗнч(МассивДанных.Получить("result")) = Тип("Соответствие") Тогда
			МассивТоваров =  МассивДанных.Получить("result").Получить("offerMappingEntries");
			Штрихкоды.Очистить();
			Для Каждого СТЧ из МассивТоваров Цикл
				Если ТипЗнч(СТЧ.Получить("offer")) = Тип("Соответствие")
				И ТипЗнч(СТЧ.Получить("mapping")) = Тип("Соответствие")
				Тогда
					НовСтрока = Штрихкоды.Добавить();
					НовСтрока.Штрихкод			= СТЧ.Получить("offer").Получить("shopSku");
					Если СтрНайти(НовСтрока.Штрихкод, "/") > 0 Тогда 
						НовСтрока.Штрихкод = СтрЗаменить(НовСтрока.Штрихкод, "/", " ");
					КонецЕсли;
					НовСтрока.ШтрихкодИД		= СТЧ.Получить("mapping").Получить("marketSku");
					НовСтрока.НоменклатураИД	= СТЧ.Получить("mapping").Получить("categoryId");
				КонецЕсли;
			КонецЦикла;
			Если Штрихкоды.Количество() > 0 Тогда
				Запрос.УстановитьПараметр("Штрихкоды",			ШтрихКоды);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ШтрихкодыЗаписать(Выборка);
				КонецЦикла;
			КонецЕсли;
			
			Токен = МассивДанных.Получить("result").Получить("paging").Получить("nextPageToken");
			Если ПустаяСтрока(Токен) Тогда Прервать;
			ИначеЕсли СледующийТокен = Токен Тогда Прервать;
			Иначе
				СледующийТокен	= Токен;
				ПараметрыЗапроса.Вставить("page_token", СледующийТокен);
			//	ЗаписатьВЖурналРегистра(ПараметрИсточник, Источник, Истина, "Обработка не завершена: Следующий Токен страницы будет = "+СледующийТокен);
			КонецЕсли;
		
		Иначе	//Если МассивДанных.Получить("error") <> Неопределено Тогда
			_error = ОшибкиПолучить(МассивДанных);
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(_error) Тогда
		ЗаписатьВЖурналРегистра(ПараметрИсточник, Идентификатор, Истина, "Обработка завершена");
	Иначе
		ЗаписатьВЖурналРегистра(ПараметрИсточник, Идентификатор,, _error);
	КонецЕсли;
КонецПроцедуры

Функция ШтрихкодыЗаписать(Выборка)
	НЗ = РегистрыСведений.ИнтернетМагазинШтриходы.СоздатьНаборЗаписей();
	НЗ.ОбменДанными.Загрузка	= Истина;
	НЗ.Отбор.ШтрихкодИД.Установить(Выборка.ШтрихкодИД);
	НЗ.Отбор.ИнтернетМагазин.Установить(Выборка.ИнтернетМагазин);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(НЗ.Добавить(), Выборка);
	Иначе
		Для Каждого ТекСтрока Из НЗ Цикл
			ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	Возврат ?(НаборЗаписейЗаписать(НЗ, "YA_GET_ITEMS"), 1, 0);
КонецФункции

#КонецОбласти

#Область YA_UPDATE_STOCK

Процедура UPDATE_STOCK()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтернетМагазиныМагазины.Склад КАК Склад
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Справочник.ИнтернетМагазины.ВнешниеСклады КАК ИнтернетМагазиныМагазины
	|ГДЕ
	|	ИнтернетМагазиныМагазины.Ссылка = &ИнтернетМагазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Номенклатура КАК Номенклатура,
	|	ВТ_Остатки.Характеристика КАК Характеристика,
	|	&ИнтернетМагазин КАК ИнтернетМагазин,
	|	ВТ_Остатки.Количество - ЕСТЬNULL(ВТ_Заказано.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ВТ_НовыеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнтернетМагазинОстаткиВнешнихСкладов.Номенклатура КАК Номенклатура,
	|		ИнтернетМагазинОстаткиВнешнихСкладов.Характеристика КАК Характеристика,
	|		СУММА(ИнтернетМагазинОстаткиВнешнихСкладов.Количество) КАК Количество
	|	ИЗ
	|		РегистрСведений.ИнтернетМагазинШтриходы КАК ИнтернетМагазинШтриходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинОстаткиВнешнихСкладов КАК ИнтернетМагазинОстаткиВнешнихСкладов
	|			ПО ИнтернетМагазинШтриходы.Характеристика = ИнтернетМагазинОстаткиВнешнихСкладов.Характеристика
	|				И ИнтернетМагазинШтриходы.Номенклатура = ИнтернетМагазинОстаткиВнешнихСкладов.Номенклатура
	|	ГДЕ
	|		ИнтернетМагазинШтриходы.ИнтернетМагазин = &ИнтернетМагазин
	|		И ИнтернетМагазинОстаткиВнешнихСкладов.Склад В
	|				(ВЫБРАТЬ
	|					Склады.Склад
	|				ИЗ
	|					Склады)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИнтернетМагазинОстаткиВнешнихСкладов.Номенклатура,
	|		ИнтернетМагазинОстаткиВнешнихСкладов.Характеристика) КАК ВТ_Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Заказано.Номенклатура КАК Номенклатура,
	|			Заказано.Характеристика КАК Характеристика,
	|			СУММА(Заказано.Количество) КАК Количество
	|		ИЗ
	|			Документ.ЗаказПокупателя.Товары КАК Заказано
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнтернетСклады КАК ИнтернетСклады
	|					ПО ЗаказПокупателя.ИнтернетСклад = ИнтернетСклады.Ссылка
	|				ПО Заказано.Ссылка = ЗаказПокупателя.Ссылка
	|		ГДЕ
	|			ЗаказПокупателя.Дата > &ДатаН
	|			И ЗаказПокупателя.Проведен = ИСТИНА
	|			И ЗаказПокупателя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			И ИнтернетСклады.Владелец = &ИнтернетМагазин
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Заказано.Номенклатура,
	|			Заказано.Характеристика) КАК ВТ_Заказано
	|		ПО ВТ_Остатки.Характеристика = ВТ_Заказано.Характеристика
	|			И ВТ_Остатки.Номенклатура = ВТ_Заказано.Номенклатура
	|ГДЕ
	|	ВТ_Остатки.Количество - ЕСТЬNULL(ВТ_Заказано.Количество, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_НовыеОстатки.Характеристика, ИнтернетМагазинОстатки.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_НовыеОстатки.Номенклатура, ИнтернетМагазинОстатки.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_НовыеОстатки.Количество, 0) КАК Количество,
	//|	ЕСТЬNULL(ИнтернетМагазинОстатки.Количество, 0) КАК КоличествоСтарый,
	|	ЕСТЬNULL(ВТ_НовыеОстатки.ИнтернетМагазин, ИнтернетМагазинОстатки.ИнтернетМагазин) КАК ИнтернетМагазин
	|ИЗ
	|	ВТ_НовыеОстатки КАК ВТ_НовыеОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинОстатки КАК ИнтернетМагазинОстатки
	|		ПО ВТ_НовыеОстатки.Характеристика = ИнтернетМагазинОстатки.Характеристика
	|			И ВТ_НовыеОстатки.Номенклатура = ИнтернетМагазинОстатки.Номенклатура
	|ГДЕ
	|	ИнтернетМагазинОстатки.ИнтернетМагазин = &ИнтернетМагазин
	|	И ЕСТЬNULL(ИнтернетМагазинОстатки.Количество, 0) <> ЕСТЬNULL(ВТ_НовыеОстатки.Количество, 0)");
	Запрос.УстановитьПараметр("ИнтернетМагазин", 	ИнтернетМагазин);
	Запрос.УстановитьПараметр("ДатаН",				ДобавитьМесяц(ТекущаяДатаСеанса(), -3));
	//Запрос.УстановитьПараметр("МинимальныйОстаток", МинимальныйОстаток);
	Запрос.УстановитьПараметр("ВидЦены",			ВидЦены);
	Запрос.УстановитьПараметр("Дата",				ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НЗ = РегистрыСведений.ИнтернетМагазинОстатки.СоздатьНаборЗаписей();
		НЗ.Отбор.Характеристика.Установить(Выборка.Характеристика);
		НЗ.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НЗ.Отбор.ИнтернетМагазин.Установить(Выборка.ИнтернетМагазин);
		НЗ.Прочитать();
		Если НЗ.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НЗ.Добавить(), Выборка);
			Если НЕ НаборЗаписейЗаписать(НЗ, "UPDATE_STOCK") Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ТекСтрока = НЗ.Получить(0);
			Если ТекСтрока.Количество <> Выборка.Количество Тогда
				ТекСтрока.Количество = Выборка.Количество;
				Если НЕ НаборЗаписейЗаписать(НЗ, "UPDATE_STOCK") Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область YA_SEND_PRICES

Функция ПодготовитьТЗДляОтправки(ТЗ)
	МассивОфферы = Новый Массив;
	Для Каждого Выборка Из ТЗ Цикл
		СтруктураТовара = Новый Структура("marketSku", Выборка.ШтрихкодИД);
		
		Ценник	= Новый Структура("currencyId,value", "RUR", Выборка.Цена);
		Если Выборка.ЦенаБазис > Выборка.Цена Тогда
			Ценник.Вставить("discountBase",	Выборка.ЦенаБазис);
		КонецЕсли;
		Ценник.Вставить("vat",	ИнтеграцияWB.ПолучитьНДСЧислом(Выборка.СтавкаНДС));
		СтруктураТовара.Вставить("price", Ценник);
		
		МассивОфферы.Добавить(СтруктураТовара);
	КонецЦикла;
	СтруктураОтвета = Новый Структура("offers", МассивОфферы);
	Возврат СтруктураОтвета;
КонецФункции

//Коды ошибки.	errors/error, code
//Возможные значения code:
//DUPLICATE_OFFER — в теле запроса передано два или более товара с одинаковыми значениями параметров market-sku.
//LIMIT_EXCEEDED — превышено индивидуальное ограничение на количество передаваемых товаров.
//REQUEST_LIMIT_EXCEEDED — в теле запроса в параметре offers передано больше 2000 товаров.
//источник = https://yandex.ru/dev/market/partner-marketplace-dp/doc/dg/reference/post-campaigns-id-offer-prices-updates.html
Процедура SEND_PRICES() Экспорт
	Идентификатор = "YA_SEND_PRICES";
	
	АдресРесурса		= АдресаРесурсов(Идентификатор);
	ДопПараметры		= ПолучитьЗаголовкиЗапросаHTTP();
	
	_error = "";
	ТЗ = ВыгрузитьЦены();
	Пока ТЗ.Количество() > 0 И ПустаяСтрока(_error) Цикл
		Попытка
			МассивДанных = КоннекторHTTP.PostJson(АдресРесурса, ПодготовитьТЗДляОтправки(ТЗ), ДопПараметры);
			Если ВРег(МассивДанных.Получить("status")) = "OK" Тогда
				_error = ОбновитьСтатусЦен(ТЗ);
				Если ПустаяСтрока(_error) Тогда
					ТЗ = ВыгрузитьЦены();
				КонецЕсли;
			Иначе
				_error = ОшибкиПолучить(МассивДанных);
			КонецЕсли;
		Исключение
			_error = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если ПустаяСтрока(_error) Тогда
		ЗаписатьВЖурналРегистра(, Идентификатор, Истина, "OK");
	Иначе
		ЗаписатьВЖурналРегистра(, Идентификатор,, _error);
	КонецЕсли;
	//Сообщить(МассивДанных);
КонецПроцедуры

Функция ОбновитьСтатусЦен(ТЗ)
	Для Каждого ТекСтрока Из ТЗ Цикл
		НЗ = РегистрыСведений.ИнтернетМагазинЦены.СоздатьНаборЗаписей();
		НЗ.Отбор.Номенклатура.Установить(ТекСтрока.Номенклатура);
		//НЗ.Отбор.ВидЦены.Установить(Объект.ВидЦены);
		НЗ.Отбор.ИнтернетМагазин.Установить(ТекСтрока.ИнтернетМагазин);
		НЗ.Прочитать();
		Для Каждого ТекЗапись Из НЗ Цикл
			Если НЕ ТекЗапись.Обработан Тогда
				ТекЗапись.Обработан = Истина;
			КонецЕсли;
		КонецЦикла;
		Попытка
			НЗ.Записать();
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Возврат "";
КонецФункции

//яндекс принимает максимальное количество в одном запросе 2000
//источник = https://yandex.ru/dev/market/partner-marketplace-dp/doc/dg/reference/prices-methods.html
Функция ВыгрузитьЦены(Сколько=2000) Экспорт
	Запрос = Новый Запрос(
	СтрЗаменить("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	            |	ЦеныНоменклатуры.Период КАК Период,
	            |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	            |	&ИнтернетМагазин КАК ИнтернетМагазин,
	            |	ЦеныНоменклатуры.Цена КАК Цена,
	            |	ЦеныНоменклатуры.ЦенаБазис КАК ЦенаБазис,
	            |	Штриходы.ШтрихкодИД КАК ШтрихкодИД,
	            |	СтавкиНДС.СтавкаНДС КАК СтавкаНДС
	            |ИЗ
	            |	РегистрСведений.ИнтернетМагазинШтриходы КАК Штриходы
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинЦены.СрезПоследних(
	            |				&Дата,
	            |				ИнтернетМагазин = &ИнтернетМагазин
	            |					И Обработан = ЛОЖЬ) КАК ЦеныНоменклатуры
	            |		ПО Штриходы.Номенклатура = ЦеныНоменклатуры.Номенклатура
	            |			И Штриходы.ИнтернетМагазин = ЦеныНоменклатуры.ИнтернетМагазин
	            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.СтавкиНДС КАК СтавкиНДС
	            |		ПО Штриходы.Номенклатура = СтавкиНДС.Ссылка
	            |ГДЕ
	            |	СтавкиНДС.Страна = &Страна
	            |
	            |УПОРЯДОЧИТЬ ПО
	            |	ШтрихкодИД", "50", Формат(Макс(50, Мин(2000, Сколько)), "ЧГ=0")));
	Запрос.УстановитьПараметр("ИнтернетМагазин", 	ИнтернетМагазин);
	Запрос.УстановитьПараметр("Страна", 			Страна);
	Запрос.УстановитьПараметр("Дата", 				ТекущаяДатаСеанса());
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область SETTINGS

Функция АдресаРесурсов(Ресурс="YA_GET_ORDERS")
	Ответ = "https://api.partner.market.yandex.ru/v2/campaigns/%1/shipments/reserves.json";
	Если ВРег(Ресурс) = "YA_GET_ITEMS" Тогда
		Ответ = "https://api.partner.market.yandex.ru/v2/campaigns/%1/offer-mapping-entries.json";
	ИначеЕсли ВРег(Ресурс) = "YA_SEND_PRICES" Тогда
		Ответ = "https://api.partner.market.yandex.ru/v2/campaigns/%1/offer-prices/updates.json";
	ИначеЕсли ВРег(Ресурс) = "YA_POST_SUGGESTIONS" Тогда
		Ответ = "https://api.partner.market.yandex.ru/v2/campaigns/%1/offer-mapping-entries/suggestions.json";
	ИначеЕсли ВРег(Ресурс) = "YA_POST_UPDATES" Тогда
		Ответ = "https://api.partner.market.yandex.ru/v2/campaigns/%1/offer-mapping-entries/updates.json";
	//Иначе	//Если Ресурс = "YA_GET_ORDERS" Тогда
	//	Ответ = "https://api.partner.market.yandex.ru/v2/campaigns/%1/shipments/reserves.json";
	КонецЕсли;
	Возврат СтрШаблон(Ответ, campaignID());
КонецФункции

//	fbs 21952668
//	fby 21979603
Функция campaignID()
	Если ПустаяСтрока(campaignID) Тогда
		campaignID = ДополнительныеПараметрыПолучитьЗначение("campaignID");
	КонецЕсли;
	Возврат campaignID;
КонецФункции

#КонецОбласти

Процедура ЦеныЗаполнить()
	Цены.Очистить();
	
	Ошибок	= 0;
	Макет	= ПолучитьМакет("Цены");
	Для Итератор=2 По Макет.ВысотаТаблицы Цикл
		ЦенаБазовая		= СтрокаВЧисло(Макет.Область(Итератор, 1).Текст);
		ЦенаРасчетная	= СтрокаВЧисло(Макет.Область(Итератор, 2).Текст);
		
		Если ЦенаРасчетная > 0 И ЦенаБазовая > 0 Тогда
			ТекСтрока = Цены.Добавить();
			ТекСтрока.ЦенаБазис	= ЦенаБазовая;
			ТекСтрока.Цена		= ЦенаРасчетная;
			
			Ошибок	= 0;
			
		ИначеЕсли Ошибок > 1 Тогда
			Прервать;
			
		Иначе
			Ошибок	= Ошибок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТест Тогда
		Цены.Свернуть("ЦенаБазис,Цена");
	КонецЕсли;
	Цены.Сортировать("ЦенаБазис,Цена");
КонецПроцедуры

Функция COPY_PRICELIST()
	Если ВидЦены=ВидЦеныБазис Или ВидЦены.Страна<>ВидЦеныБазис.Страна Тогда
		ЗаписатьВЖурналРегистра(, "YA_SEND_PRICES",, СтрШаблон("Неверно установлены виды цен %1, %2", ВидЦены, ВидЦеныБазис));
		Возврат Ложь;
	КонецЕсли;
	
	ЦеныЗаполнить();
	
	Дата	= ТекущаяДатаСеанса();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Шматрица.ЦенаБазис КАК ЦенаБазовая,
		|	Шматрица.Цена КАК ЦенаРасчетная
		|ПОМЕСТИТЬ Шматрица
		|ИЗ
		|	&Цены КАК Шматрица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Период КАК Период,
		|	&ВидЦены КАК ВидЦены,
		|	Штриходы.Номенклатура КАК Номенклатура,
		|	&ИнтернетМагазин КАК ИнтернетМагазин,
		|	&Страна КАК Страна,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	МАКСИМУМ(ЕСТЬNULL(Шматрица.ЦенаРасчетная, 0)) КАК ЦенаБазис,
		|	ЦеныНоменклатуры.Валюта КАК Валюта
		|ИЗ
		|	РегистрСведений.ИнтернетМагазинШтриходы КАК Штриходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
		|		ПО Штриходы.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ВидЦены = &ВидЦеныБазис) КАК ЦеныБазис
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Шматрица КАК Шматрица
		|			ПО ЦеныБазис.Цена >= Шматрица.ЦенаБазовая
		|		ПО Штриходы.Номенклатура = ЦеныБазис.Номенклатура
		|ГДЕ
		|	Штриходы.ИнтернетМагазин = &ИнтернетМагазин
		|
		|СГРУППИРОВАТЬ ПО
		|	Штриходы.Номенклатура,
		|	ЦеныНоменклатуры.Цена,
		|	ЦеныНоменклатуры.Период,
		|	ЦеныНоменклатуры.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Цена");
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазин);
	Запрос.УстановитьПараметр("Страна",				Страна);
	Запрос.УстановитьПараметр("ВидЦены",			ВидЦены);
	Запрос.УстановитьПараметр("ВидЦеныБазис",		ВидЦеныБазис);
	Запрос.УстановитьПараметр("Цены",				Цены);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НЗ = РегистрыСведений.ИнтернетМагазинЦены.СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(Выборка.Период);
		НЗ.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НЗ.Отбор.ВидЦены.Установить(Выборка.ВидЦены);
		НЗ.Отбор.ИнтернетМагазин.Установить(Выборка.ИнтернетМагазин);
		НЗ.Прочитать();
		Если НЗ.Количество() = 0 Тогда
			ТекЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка);
			Если НЕ НаборЗаписейЗаписать(НЗ, "YA_COPY_PRICES") Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ТекЗапись = НЗ.Получить(0);
			Если ТекЗапись.Цена <> Выборка.Цена
			Или ТекЗапись.ЦенаБазис <> Выборка.ЦенаБазис
			Тогда
				ТекЗапись.Цена		= Выборка.Цена;
				ТекЗапись.ЦенаБазис	= Выборка.ЦенаБазис;
				ТекЗапись.Обработан	= Ложь;
				Если НЕ НаборЗаписейЗаписать(НЗ, "YA_COPY_PRICES") Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция СтрокаВЧисло(Слово)
	Попытка
		Возврат Число(СокрЛП(Слово));
	Исключение КонецПопытки;
	Возврат 0;
КонецФункции

Функция НаборЗаписейЗаписать(НаборЗаписей, Идентификатор)
	Если НаборЗаписей.ПроверитьЗаполнение() Тогда
		Попытка
			НаборЗаписей.Записать();
			Возврат Истина;
		Исключение
			ЗаписатьВЖурналРегистра(, Идентификатор,, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ЦеныЗаписать() Экспорт
	Для Каждого ТекСтрока Из Цены Цикл
		НЗ = РегистрыСведений.ИнтернетМагазинЦены.СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(ТекСтрока.Период);
		НЗ.Отбор.Номенклатура.Установить(ТекСтрока.Номенклатура);
		НЗ.Отбор.ИнтернетМагазин.Установить(ИнтернетМагазин);
		НЗ.Отбор.ВидЦены.Установить(ВидЦены);
		НЗ.Прочитать();
		Если НЗ.Количество() = 0 Тогда
			ТекЗапись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ТекЗапись, ТекСтрока);
			ТекЗапись.ИнтернетМагазин	= ИнтернетМагазин;
			ТекЗапись.ВидЦены			= ВидЦены;
			ТекЗапись.Валюта			= Валюта;
			ТекЗапись.Страна			= Страна;
			Если НЕ НаборЗаписейЗаписать(НЗ, "YA_COPY_PRICES") Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ТекЗапись = НЗ.Получить(0);
			Если ТекЗапись.Цена <> ТекСтрока.Цена
			Или ТекЗапись.ЦенаБазис <> ТекСтрока.ЦенаБазис
			Тогда
				ТекЗапись.Цена		= ТекСтрока.Цена;
				ТекЗапись.ЦенаБазис	= ТекСтрока.ЦенаБазис;
				ТекЗапись.Обработан	= Ложь;
				Если НЕ НаборЗаписейЗаписать(НЗ, "YA_COPY_PRICES") Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РазмерыЗаписать() Экспорт
	Идентификатор	= "YA_POST_UPDATES";
	АдресSelect			= АдресаРесурсов("YA_POST_SUGGESTIONS");
	АдресUpadte			= АдресаРесурсов(Идентификатор);
	ДопПараметры	= ПолучитьЗаголовкиЗапросаHTTP();
	
	offers = Новый Массив;
	_error = "";
	Для Каждого ТекСтрока Из Размеры Цикл
		Если ТекСтрока.Вес * ТекСтрока.Ширина * ТекСтрока.Высота * ТекСтрока.Длина > 0 Тогда
			offers.Очистить();
			offers.Добавить(Новый Структура("shopSku", ТекСтрока.ЯндексSKU));
			Попытка
				МассивДанных = КоннекторHTTP.PostJson(АдресSelect, Новый Структура("offers", offers), ДопПараметры);
				Если ТипЗнч(МассивДанных) = Тип("Соответствие")
				И ВРег(МассивДанных.Получить("status")) = "OK" Тогда
					result	= МассивДанных.Получить("result");
					offers	= result.Получить("offers");
					//Если ТипЗнч(offers) = Тип("Массив") И offers.Количество() > 0 Тогда
					//	offers.Получить(0).Вставить("weightDimensions", Новый Структура("length,width,height,weight", ТекСтрока.Длина, ТекСтрока.Ширина, ТекСтрока.Высота, ТекСтрока.Вес));
					//	МассивДанных = КоннекторHTTP.PostJson(АдресUpadte, Новый Структура("offers", offers), ДопПараметры);
					//	
					//	Если ТипЗнч(МассивДанных) = Тип("Соответствие")
					//	И ВРег(МассивДанных.Получить("status")) = "OK" Тогда
					//	Иначе
					//		_error = ОшибкиПолучить(МассивДанных);
					//	КонецЕсли;
					//КонецЕсли;
				Иначе
					_error = ОшибкиПолучить(МассивДанных);
				КонецЕсли;
			Исключение
				_error = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(_error) Тогда
		//ЗаписатьВЖурналРегистра(, Идентификатор, Истина, "OK");
	Иначе
		ЗаписатьВЖурналРегистра(, Идентификатор,, _error);
	КонецЕсли;
КонецПроцедуры

Функция КарточкиПолучить()
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 22
	|	Товар.Ссылка КАК Номенклатура,
	|	Товар.Наименование КАК НоменклатураНаименование,
	|	Товар.Артикул КАК Артикул,
	|	Товар.Модель КАК Модель,
	|	ПОДСТРОКА(Данные.Значение, 1, 100) КАК category,
	|	ПОДСТРОКА(КатегорииИД.Значение, 1, 20) КАК categoryID,
	|	ПОДСТРОКА(Типы.Значение, 1, 100) КАК Тип,
	|	ПОДСТРОКА(Габариты.Значение, 1, 100) КАК dimensions,
	|	ПОДСТРОКА(Весы.Значение, 1, 100) КАК weight,
	|	МАКСИМУМ(ЕСТЬNULL(ПОДСТРОКА(Цветы.Значение, 1, 30), СписокКарточек.Цвет)) КАК Цвет,
	|	НоменклатурныеЦвета.КодИсточник КАК ЦветКод,
	|	СписокКарточек.Характеристика КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
	|	МАКСИМУМ(ЕСТЬNULL(СоставыТкани.НаименованиеЛокальный, ПОДСТРОКА(Карточки.Состав, 1, 150))) КАК Состав,
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторТНВЭД.Код, Карточки.ТНВЭД)) КАК ТНВЭД,
	|	Данные.СсылкаОбъекта КАК СсылкаОбъекта,
	|	МАКСИМУМ(ЕСТЬNULL(Размеры.Значение, Карточки.РосРазмер)) КАК РосРазмер,
	|	&ИнтернетМагазин КАК ИнтернетМагазин,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК barcode,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПОДСТРОКА(Родители.Значение, 1, 100) > "" ""
	|				ТОГДА ПОДСТРОКА(Родители.Значение, 1, 100)
	|			КОГДА ПОДСТРОКА(Данные.Значение, 1, 100) > "" ""
	|				ТОГДА ПОДСТРОКА(Данные.Значение, 1, 100)
	|			ИНАЧЕ СписокКарточек.parent
	|		КОНЕЦ) КАК parent,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкоды.Штрихкод) КАК ШтрихкодКоличество,
	|	ЕСТЬNULL(Цены.Цена, 0) КАК price,
	|	ЕСТЬNULL(Цены.ЦенаБазис, 0) КАК oldprice,
	|	МАКСИМУМ(ЕСТЬNULL(НоменклатураСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС))) КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.мп_СписокСоздаваемыхКарточек КАК СписокКарточек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СписокКарточек.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО СписокКарточек.Характеристика = Штрихкоды.Характеристика
	|			И СписокКарточек.Номенклатура = Штрихкоды.Владелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товар
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеЦвета КАК НоменклатурныеЦвета
	|			ПО Товар.Цвет = НоменклатурныеЦвета.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.мп_Категории КАК Категории
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Данные
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК КатегорииИД
	|					ПО Данные.СсылкаОбъекта = КатегорииИД.СсылкаОбъекта
	|						И Данные.ИнтернетМагазин = КатегорииИД.ИнтернетМагазин
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Типы
	|					ПО Данные.СсылкаОбъекта = Типы.СсылкаОбъекта
	|						И Данные.ИнтернетМагазин = Типы.ИнтернетМагазин
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Габариты
	|					ПО Данные.СсылкаОбъекта = Габариты.СсылкаОбъекта
	|						И Данные.ИнтернетМагазин = Габариты.ИнтернетМагазин
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Весы
	|					ПО Данные.СсылкаОбъекта = Весы.СсылкаОбъекта
	|						И Данные.ИнтернетМагазин = Весы.ИнтернетМагазин
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Родители
	|					ПО Данные.СсылкаОбъекта = Родители.СсылкаОбъекта
	|						И Данные.ИнтернетМагазин = Родители.ИнтернетМагазин
	|				ПО Категории.Ссылка = Данные.СсылкаОбъекта
	|			ПО Товар._MopClass = Категории._MopClass
	|				И Товар._MopCategory = Категории._MopCategory
	|				И Товар._MopDivision = Категории._MopDivision
	|				И Товар._MopDepartment = Категории._MopDepartment
	|				И Товар._MopSubDepartment = Категории._MopSubDepartment
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Цветы
	|			ПО Товар.Цвет = Цветы.СсылкаОбъекта
	|				И (Цветы.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.Цвет))
	|				И (Цветы.ИнтернетМагазин = &ИнтернетМагазин)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныйСоставыТкани КАК НоменклатурныйСоставыТкани
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТ_НоменклатурныйСоставТкани КАК СоставыТкани
	|				ПО НоменклатурныйСоставыТкани.Наименование = СоставыТкани.Наименование
	|			ПО Товар.СоставТкани = НоменклатурныйСоставыТкани.Ссылка
	|		ПО СписокКарточек.Номенклатура = Товар.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинРазмеры КАК Размеры
	|		ПО СписокКарточек.Номенклатура._MopClass = Размеры.Категория
	|			И СписокКарточек.Номенклатура._MopSubDepartment = Размеры.Пол
	|			И СписокКарточек.Характеристика.Наименование = Размеры.Размер
	|			И (Размеры.ИнтернетМагазин В (&ИнтернетМагазины))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТНВЭД.СрезПоследних(, Страна = &Страна) КАК КодыТНВЭД
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|			ПО КодыТНВЭД.ТНВЭД = КлассификаторТНВЭД.Ссылка
	|		ПО СписокКарточек.Номенклатура = КодыТНВЭД.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинЦены.СрезПоследних(
	|				&Дата,
	|				ВидЦены = &ВидЦены
	|					И ИнтернетМагазин = &ИнтернетМагазин) КАК Цены
	|		ПО СписокКарточек.Номенклатура = Цены.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.СтавкиНДС КАК НоменклатураСтавкиНДС
	|		ПО СписокКарточек.Номенклатура = НоменклатураСтавкиНДС.Ссылка
	|			И (НоменклатураСтавкиНДС.Страна = &Страна)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_СписокСоздаваемыхКарточек КАК Карточки
	|		ПО СписокКарточек.Номенклатура = Карточки.Номенклатура
	|ГДЕ
	|	СписокКарточек.ИнтернетМагазин = &ИнтернетМагазин
	|	И СписокКарточек.Создан = ЛОЖЬ
	|	И Данные.ИнтернетМагазин = &ИнтернетМагазин
	|	И Данные.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.Категория)
	|	И Типы.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.Комплектация)
	|	И Габариты.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.dimension_unit)
	|	И Весы.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.weight_unit)
	|	И Родители.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.parent)
	|	И КатегорииИД.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.КатегорияID)
	|	И ПОДСТРОКА(КатегорииИД.Значение, 1, 20) > "" ""
	|	И ЕСТЬNULL(ПОДСТРОКА(Цветы.Значение, 1, 30), СписокКарточек.Цвет) > "" ""
	|	И Карточки.ИнтернетМагазин В(&ИнтернетМагазины)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товар.Ссылка,
	|	Товар.Наименование,
	|	Товар.Артикул,
	|	Товар.Модель,
	|	СписокКарточек.Характеристика,
	|	Данные.СсылкаОбъекта,
	|	ПОДСТРОКА(Данные.Значение, 1, 100),
	|	ПОДСТРОКА(Типы.Значение, 1, 100),
	|	ПОДСТРОКА(Габариты.Значение, 1, 100),
	|	ПОДСТРОКА(Весы.Значение, 1, 100),
	|	ЕСТЬNULL(Цены.Цена, 0),
	|	ЕСТЬNULL(Цены.ЦенаБазис, 0),
	|	ПОДСТРОКА(КатегорииИД.Значение, 1, 20),
	|	ХарактеристикиНоменклатуры.Наименование,
	|	НоменклатурныеЦвета.КодИсточник
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторТНВЭД.Код, Карточки.ТНВЭД)) > "" "" И
	|	МАКСИМУМ(ЕСТЬNULL(СоставыТкани.НаименованиеЛокальный, ПОДСТРОКА(Карточки.Состав, 1, 150))) > "" "" И
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПОДСТРОКА(Родители.Значение, 1, 100) > "" ""
	|				ТОГДА ПОДСТРОКА(Родители.Значение, 1, 100)
	|			КОГДА ПОДСТРОКА(Данные.Значение, 1, 100) > "" ""
	|				ТОГДА ПОДСТРОКА(Данные.Значение, 1, 100)
	|			ИНАЧЕ СписокКарточек.parent
	|		КОНЕЦ) > "" ""
	|
	|УПОРЯДОЧИТЬ ПО
	|	category,
	|	НоменклатураНаименование,
	|	ХарактеристикаНаименование");
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазин);
	Запрос.УстановитьПараметр("ИнтернетМагазины",	ИнтернетМагазиныПолучить(Истина));
	//АттрибутыОбязательные = Новый Массив;
	//АттрибутыОбязательные.Добавить(Справочники.мп_АттрибутыКарточек.Категория);
	Запрос.УстановитьПараметр("Дата",				ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦены",			ВидЦены);
	Запрос.УстановитьПараметр("Страна",				Страна);
	//Запрос.УстановитьПараметр("Язык",				Язык);
	Если НЕ ЭтоТест Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 22", "");
	КонецЕсли;
	Старт	= ТекущаяУниверсальнаяДата();
	Выборка = Запрос.Выполнить().Выбрать();
	Если ЭтоТест() Тогда
		Сообщить("Затрачено " + ЗатраченоВремени(ТекущаяУниверсальнаяДата() - Старт));
		Сообщить(Строка(Выборка.Количество()));
	КонецЕсли;
	Возврат Выборка;
КонецФункции

Процедура ХарактеристикиПолучить(Параметры, Характеристики)
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтраныПроисхождения.Значение, """") КАК country_of_origin,
	|	ПОДСТРОКА(ЕСТЬNULL(Полы.Значение, ЕСТЬNULL(Разделения.Наименование, Карточки.Пол)), 1, 10) КАК Пол,
	|	СписокКарточек.Изображение1 КАК Изображение1,
	|	СписокКарточек.Изображение2 КАК Изображение2,
	|	СписокКарточек.Изображение3 КАК Изображение3,
	|	СписокКарточек.Изображение4 КАК Изображение4,
	|	СписокКарточек.Изображение5 КАК Изображение5,
	|	СписокКарточек.Изображение6 КАК Изображение6,
	|	СписокКарточек.Изображение7 КАК Изображение7,
	|	СписокКарточек.Изображение8 КАК Изображение8,
	|	СписокКарточек.Изображение9 КАК Изображение9,
	|	СписокКарточек.Изображение10 КАК Изображение10,
	|	&Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовИМ КАК СписокКарточек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товар
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК СтраныПроисхождения
	|			ПО Товар.СтранаПроизводства = СтраныПроисхождения.СсылкаОбъекта
	|				И (СтраныПроисхождения.ИнтернетМагазин В (&ИнтернетМагазины))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Полы
	|			ПО Товар._MopSubDepartment = Полы.СсылкаОбъекта
	|				И (Полы.ИнтернетМагазин В (&ИнтернетМагазины))
	|		ПО СписокКарточек.Номенклатура = Товар.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_СписокСоздаваемыхКарточек КАК Карточки
	|		ПО СписокКарточек.Номенклатура = Карточки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТ_НоменклатурныеРазделения КАК Разделения
	|		ПО СписокКарточек.Разделение = Разделения.Ссылка
	|ГДЕ
	|	СписокКарточек.Номенклатура = &Номенклатура
	|	И СписокКарточек.ИнтернетМагазин В(&ИнтернетМагазины)
	|	И Карточки.ИнтернетМагазин В(&ИнтернетМагазины)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокКарточек.ИнтернетМагазин = &ИнтернетМагазин УБЫВ,
	|	СтраныПроисхождения.ИнтернетМагазин = &ИнтернетМагазин УБЫВ,
	|	Карточки.ИнтернетМагазин = &ИнтернетМагазин УБЫВ");
	Запрос.УстановитьПараметр("Номенклатура",		Параметры.Номенклатура);
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазин);
	Запрос.УстановитьПараметр("ИнтернетМагазины",	ИнтернетМагазиныПолучить(, Истина));
	//Запрос.УстановитьПараметр("Страна",				Страна);
	//Запрос.УстановитьПараметр("Язык",				Язык);
	Выборка =  Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Характеристики, Выборка);
		Пока Выборка.Следующий() Цикл
			Если ПустаяСтрока(Характеристики.country_of_origin) И НЕ ПустаяСтрока(Выборка.country_of_origin) Тогда
				Характеристики.country_of_origin = Выборка.country_of_origin;
			КонецЕсли;
			Если ПустаяСтрока(Характеристики.Пол) И НЕ ПустаяСтрока(Выборка.Пол) Тогда
				Характеристики.Пол = Выборка.Пол;
			КонецЕсли;
			Если ПустаяСтрока(Характеристики.Изображение10) И НЕ ПустаяСтрока(Выборка.Изображение10) Тогда
				Характеристики.Изображение10 = Выборка.Изображение10;
			ИначеЕсли НЕ ПустаяСтрока(Характеристики.Изображение1)
			И НЕ ПустаяСтрока(Характеристики.country_of_origin) И НЕ ПустаяСтрока(Характеристики.Пол)
			Тогда
				Прервать;
			КонецЕсли;
			Для Итератор = 1 По 9 Цикл
				ИмяПоля = "Изображение" + Формат(Итератор, "ЧГ=0");
				Если ПустаяСтрока(Характеристики[ИмяПоля]) И НЕ ПустаяСтрока(Выборка[ИмяПоля]) Тогда
					Характеристики[ИмяПоля] = Выборка[ИмяПоля];
				ИначеЕсли НЕ ПустаяСтрока(Характеристики[ИмяПоля]) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ИнтернетМагазиныПолучить(ПоСтране=Ложь, ПлюсПустой=Ложь) Экспорт
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтернетМагазины.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИнтернетМагазины КАК ИнтернетМагазины
	|ГДЕ
	|	ИнтернетМагазины.Язык = &Язык
	|	И ИнтернетМагазины.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Язык",				Язык);
	Если ПоСтране Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ИнтернетМагазины.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ИнтернетМагазины КАК ИнтернетМагазины
		               |ГДЕ
		               |	ИнтернетМагазины.Страна = &Страна
		               |	И ИнтернетМагазины.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Страна",				Страна);
	КонецЕсли;
	Ответ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Если ПлюсПустой Тогда
		Ответ.Добавить(Справочники.ИнтернетМагазины.ПустаяСсылка());
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция БарКодыПолучить(Параметры)
	Ответ	= "";
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Характеристика = &Характеристика
	|	И Штрихкоды.Владелец = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод");
	Запрос.УстановитьПараметр("Номенклатура",		Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",		Параметры.Характеристика);
	Выборка =  Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Ответ = ?(ПустаяСтрока(Ответ), Выборка.Штрихкод, Ответ + "," + Выборка.Штрихкод);
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция РосРазмерПолучить(Номенклатура, Знач Размер)
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ
	|	Размеры.Значение КАК Размер
	|ИЗ
	|	Справочник.Номенклатура КАК Товар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетМагазинРазмеры КАК Размеры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазины КАК ИнтернетМагазины
	|			ПО Размеры.ИнтернетМагазин = ИнтернетМагазины.Ссылка
	|		ПО Товар._MopClass = Размеры.Категория
	|			И Товар._MopSubDepartment = Размеры.Пол
	|ГДЕ
	|	Товар.Ссылка = &Номенклатура
	|	И ИнтернетМагазины.Страна = &Страна
	|	И Размеры.Размер = &Размер
	|	И Размеры.Значение > "" ""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Размеры.ИнтернетМагазин = &ИнтернетМагазин УБЫВ");
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазин);
	Запрос.УстановитьПараметр("Номенклатура",		Номенклатура);
	Запрос.УстановитьПараметр("Размер",				Размер);
	Запрос.УстановитьПараметр("Страна",				Страна);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Размер = Выборка.Размер;
	КонецЕсли;
	Возврат Размер;
КонецФункции

Процедура ЗаписатьТекст(ЗаписьХМL, ПолноеИмя, Текст, param=Ложь)
	Если Не ПустаяСтрока(Текст) Тогда
		Если param Тогда
			ЗаписьХМL.ЗаписатьНачалоЭлемента("param");
			ЗаписьХМL.ЗаписатьАтрибут("name", ПолноеИмя);
		Иначе
			ЗаписьХМL.ЗаписатьНачалоЭлемента(ПолноеИмя);
		КонецЕсли;
		ЗаписьХМL.ЗаписатьТекст(Текст);
		ЗаписьХМL.ЗаписатьКонецЭлемента();
	КонецЕсли;
КонецПроцедуры

Функция НаименованиеСформировать(Карточки)
	//name	= Карточки.Модель + " " + Карточки.ХарактеристикаНаименование + ?(ПустаяСтрока(Карточки.РосРазмер), "", "(" + СокрЛП(Карточки.РосРазмер) + ")") + " " + Карточки.ЦветКод + " " + Карточки.Цвет;
	//Если ПустаяСтрока(Карточки.РосРазмер) Или Карточки.ХарактеристикаНаименование = Карточки.РосРазмер Тогда
	//	Возврат Карточки.Модель + " " + Карточки.ХарактеристикаНаименование + " " + Карточки.ЦветКод + " " + Карточки.Цвет;
	//КонецЕсли;
	//Возврат Карточки.Модель + " " + Карточки.ХарактеристикаНаименование + ?(ПустаяСтрока(Карточки.РосРазмер), "", "(" + СокрЛП(Карточки.РосРазмер) + ")") + " " + Карточки.ЦветКод + " " + Карточки.Цвет;
	//Возврат СокрЛП(Карточки.parent) + " " + Карточки.Модель + " " + Карточки.ХарактеристикаНаименование + ?(ПустаяСтрока(Карточки.РосРазмер), "", "(" + СокрЛП(Карточки.РосРазмер) + ")") + " " + Карточки.ЦветКод + " " + Карточки.Цвет;
	//Возврат Карточки.Модель + " " + Карточки.ХарактеристикаНаименование + ?(ПустаяСтрока(РосРазмер), "", "(" + СокрЛП(РосРазмер) + ")") + " " + Карточки.ЦветКод + " " + Карточки.Цвет;
	Возврат СокрЛП(Карточки.parent) + " " + Марка() + ", размер " + СокрЛП(Карточки.ХарактеристикаНаименование) + ", " + СокрЛП(Карточки.Цвет);
КонецФункции

Функция CARDS_CREATE() Экспорт
	Старт	= ТекущаяУниверсальнаяДата();
	Карточки= КарточкиПолучить();
	Если Карточки.Количество() = 0 Тогда Возврат ""; КонецЕсли;
	
	КоличествоВыгруженныхТоваров = 0;
	//МассивКатегории = Новый Массив;
	//categoryID		= Неопределено;
	Характеристики	= Новый Структура("Номенклатура,country_of_origin,Пол,Изображение1,Изображение2,Изображение3,Изображение4,Изображение5,Изображение6,Изображение7,Изображение8,Изображение9,Изображение10");
	
	ИмяФайла	= ПолучитьИмяВременногоФайла(".yml");
	ЗаписьХМL	= Новый ЗаписьXML;
	ЗаписьХМL.ОткрытьФайл(ИмяФайла);
	ЗаписьХМL.ЗаписатьОбъявлениеXML();
	
	ЗаписьХМL.ЗаписатьНачалоЭлемента("yml_catalog");
	ЗаписьХМL.ЗаписатьАтрибут("date", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm'"));
		ЗаписьХМL.ЗаписатьНачалоЭлемента("shop");
			СписокШиндлера	= Новый Массив;
			Пока Карточки.Следующий() Цикл
				Если СписокШиндлера.Найти(Карточки.СсылкаОбъекта) = Неопределено Тогда
					СписокШиндлера.Добавить(Карточки.СсылкаОбъекта);
				КонецЕсли;
			КонецЦикла;
			Карточки.Сбросить();
			
			categoriesПолучить(СписокШиндлера);
			СписокШиндлера.Очистить();;
			ЗаписьХМL.ЗаписатьНачалоЭлемента("categories");
			Для Каждого ТекСтрока Из categories Цикл
				Если ТекСтрока.parentId > 0 И НЕ ПустаяСтрока(ТекСтрока.parent) Тогда
					Если СписокШиндлера.Найти(ТекСтрока.parentId) = Неопределено Тогда
						СписокШиндлера.Добавить(ТекСтрока.parentId);
						ЗаписьХМL.ЗаписатьНачалоЭлемента("category");
						ЗаписьХМL.ЗаписатьАтрибут("id", Формат(ТекСтрока.parentId, "ЧГ=0"));
						ЗаписьХМL.ЗаписатьТекст(СокрЛП(ТекСтрока.parent));
						ЗаписьХМL.ЗаписатьКонецЭлемента();
					КонецЕсли;
				КонецЕсли;
				ЗаписьХМL.ЗаписатьНачалоЭлемента("category");
					ЗаписьХМL.ЗаписатьАтрибут("id", Формат(ТекСтрока.categoryID, "ЧГ=0"));
					Если ТекСтрока.parentId > 0 Тогда
						ЗаписьХМL.ЗаписатьАтрибут("parentId", Формат(ТекСтрока.parentId, "ЧГ=0"));
					КонецЕсли;
					ЗаписьХМL.ЗаписатьТекст(СокрЛП(ТекСтрока.category));
				ЗаписьХМL.ЗаписатьКонецЭлемента();
			КонецЦикла;
	        ЗаписьХМL.ЗаписатьКонецЭлемента();
			
			//////////////////////////////////////////////////////////////////////////////////////////////
			ЗаписьХМL.ЗаписатьНачалоЭлемента("offers");
			Пока Карточки.Следующий() Цикл
				ЗаписьХМL.ЗаписатьНачалоЭлемента("offer");
				
				ЗаписьХМL.ЗаписатьАтрибут("id",	СокрЛП(Карточки.Артикул) + СтрЗаменить(СокрЛП(Карточки.ХарактеристикаНаименование), " ", "/"));
					name	= НаименованиеСформировать(Карточки);
					ЗаписатьТекст(ЗаписьХМL, "name", name);
					//ЗаписатьТекст(ЗаписьХМL, "market-sku", Карточки.Артикул + Карточки.ХарактеристикаНаименование);
					ЗаписатьТекст(ЗаписьХМL, "categoryId", Карточки.categoryID);
					ЗаписатьТекст(ЗаписьХМL, "vendor", Марка());
					ЗаписатьТекст(ЗаписьХМL, "vendorCode", Карточки.Артикул);
					ЗаписатьТекст(ЗаписьХМL, "dimensions", Карточки.dimensions);
					ЗаписатьТекст(ЗаписьХМL, "weight", Карточки.weight);
					ЗаписатьТекст(ЗаписьХМL, "description", name);
					
					Если Карточки.price > 0 Тогда
						ЗаписатьТекст(ЗаписьХМL, "price", Формат(Карточки.price, "ЧГ=0"));
						Если Карточки.oldprice > Карточки.price Тогда
							ЗаписатьТекст(ЗаписьХМL, "oldprice", Формат(Карточки.oldprice, "ЧГ=0"));
						КонецЕсли;
					КонецЕсли;
					ЗаписатьТекст(ЗаписьХМL, "vat", Формат(ИнтеграцияWB.ПолучитьНДСЧислом(Карточки.СтавкаНДС), "ЧГ=0"));
					
					ЗаписатьТекст(ЗаписьХМL, "barcode", ?(Карточки.ШтрихкодКоличество=1, Карточки.barcode, БарКодыПолучить(Карточки)));
					//ЗаписатьТекст(ЗаписьХМL, "description", Товар.category + Карточки.);
					
					ЗаписатьТекст(ЗаписьХМL, "Цвет", Карточки.Цвет, Истина);
					ЗаписатьТекст(ЗаписьХМL, "Состав", СокрЛП(Карточки.Состав), Истина);
					
					Если Характеристики.Номенклатура <> Карточки.Номенклатура Тогда
						ХарактеристикиПолучить(Карточки, Характеристики);
					КонецЕсли;
					Если Характеристики.Номенклатура = Карточки.Номенклатура Тогда
						ЗаписатьТекст(ЗаписьХМL, "Размер", Карточки.РосРазмер, Истина);
						ЗаписатьТекст(ЗаписьХМL, "Пол", Характеристики.Пол, Истина);
						
						ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение1);
						ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение2);
						ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение3);
						Если НЕ ПустаяСтрока(Характеристики.Изображение4) Тогда
							ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение4);
							ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение5);
							ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение6);
							Если НЕ ПустаяСтрока(Характеристики.Изображение7) Тогда
								ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение7);
								ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение8);
								ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение9);
								ЗаписатьТекст(ЗаписьХМL, "picture", Характеристики.Изображение10);
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(Характеристики.country_of_origin) Тогда
							ЗаписатьТекст(ЗаписьХМL, "country_of_origin", Характеристики.country_of_origin);
						КонецЕсли;
					КонецЕсли;
					ЗаписьХМL.ЗаписатьНачалоЭлемента("tn-ved-codes");
						ЗаписатьТекст(ЗаписьХМL, "tn-ved-code", Карточки.ТНВЭД);
					ЗаписьХМL.ЗаписатьКонецЭлемента();
				ЗаписьХМL.ЗаписатьКонецЭлемента();
				
				//Если НЕ ЭтоТест Тогда
				//	НЗ	= РегистрыСведений.мп_СписокСоздаваемыхКарточек.СоздатьНаборЗаписей();
				//	НЗ.Отбор.Характеристика.Установить(Карточки.Характеристика);
				//	НЗ.Отбор.Номенклатура.Установить(Карточки.Номенклатура);
				//	НЗ.Отбор.ИнтернетМагазин.Установить(ИнтернетМагазин);
				//	НЗ.Прочитать();
				//	Для Каждого ТекЗапись Из НЗ Цикл
				//		ТекЗапись.Создан	= Истина;
				//	КонецЦикла;
				//	НЗ.Записать();
				//КонецЕсли;
			КонецЦикла;
			ЗаписьХМL.ЗаписатьКонецЭлемента();
		ЗаписьХМL.ЗаписатьКонецЭлемента();
	ЗаписьХМL.ЗаписатьКонецЭлемента();
	ЗаписьХМL.Закрыть();
	
	Если ЭтоТест() Тогда
		Сообщить("Затрачено " + ЗатраченоВремени(ТекущаяУниверсальнаяДата() - Старт));
	КонецЕсли;
	Возврат ИмяФайла;
КонецФункции

Процедура categoriesПолучить(Ссылки)
	//categories.Свернуть("categoryID,category");
	//categories.Сортировать("categoryID");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПОДСТРОКА(КатегорииИД.Значение, 1, 20) КАК categoryID,
	|	ПОДСТРОКА(Категории.Значение, 1, 100) КАК category,
	|	ПОДСТРОКА(КомплектацияИД.Значение, 1, 20) КАК parentId,
	|	ПОДСТРОКА(Комплектация.Значение, 1, 100) КАК parent
	|ИЗ
	|	РегистрСведений.мп_ДанныеКарточек КАК КатегорииИД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Категории
	|		ПО КатегорииИД.СсылкаОбъекта = Категории.СсылкаОбъекта
	|			И КатегорииИД.ИнтернетМагазин = Категории.ИнтернетМагазин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК КомплектацияИД
	|		ПО КатегорииИД.СсылкаОбъекта = КомплектацияИД.СсылкаОбъекта
	|			И КатегорииИД.ИнтернетМагазин = КомплектацияИД.ИнтернетМагазин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мп_ДанныеКарточек КАК Комплектация
	|		ПО КатегорииИД.СсылкаОбъекта = Комплектация.СсылкаОбъекта
	|			И КатегорииИД.ИнтернетМагазин = Комплектация.ИнтернетМагазин
	|ГДЕ
	|	КатегорииИД.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.КатегорияID)
	|	И КатегорииИД.ИнтернетМагазин = &ИнтернетМагазин
	|	И ПОДСТРОКА(КатегорииИД.Значение, 1, 20) > "" ""
	|	И КатегорииИД.СсылкаОбъекта В(&Ссылки)
	|	И Категории.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.Категория)
	|	И КомплектацияИД.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.КомплектацияID)
	|	И Комплектация.Аттрибут = ЗНАЧЕНИЕ(Справочник.мп_АттрибутыКарточек.Комплектация)
	|	И ПОДСТРОКА(Комплектация.Значение, 1, 100) > "" ""
	|
	|УПОРЯДОЧИТЬ ПО
	|	parentId,
	|	categoryID");
	Запрос.УстановитьПараметр("Ссылки",		Ссылки);
	//Аттрибуты	= Новый Массив;
	//Аттрибуты.Добавить(Справочники.мп_АттрибутыКарточек.КатегорияID);
	//Аттрибуты.Добавить(Справочники.мп_АттрибутыКарточек.Категория);
	//Аттрибуты.Добавить(Справочники.мп_АттрибутыКарточек.КомплектацияID);
	//Аттрибуты.Добавить(Справочники.мп_АттрибутыКарточек.Комплектация);
	//Запрос.УстановитьПараметр("Аттрибуты",	Аттрибуты);
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазинЯндекс());
	Выборка = Запрос.Выполнить().Выбрать();
	categories.Очистить();
	Пока Выборка.Следующий() Цикл
		ТекСтрока	= categories.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
	КонецЦикла;
	categories.Сортировать("parentId,categoryID");
КонецПроцедуры

Функция Марка()
	Возврат "KOTON";
КонецФункции

Функция ТолькоНеЯндекс() Экспорт
	Ответ	= Справочники.ИнтернетМагазины.ПустаяСсылка();
	Запрос	= Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	мп_СписокСоздаваемыхКарточек.ИнтернетМагазин КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ мп_СписокСоздаваемыхКарточек.Номенклатура) КАК Номенклатура
	|ИЗ
	|	РегистрСведений.мп_СписокСоздаваемыхКарточек КАК мп_СписокСоздаваемыхКарточек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазины КАК ИнтернетМагазины
	|		ПО мп_СписокСоздаваемыхКарточек.ИнтернетМагазин = ИнтернетМагазины.Ссылка
	|ГДЕ
	|	ИнтернетМагазины.Страна = &Страна
	|	И ИнтернетМагазины.Ссылка <> &ИнтернетМагазин
	|
	|СГРУППИРОВАТЬ ПО
	|	мп_СписокСоздаваемыхКарточек.ИнтернетМагазин,
	|	ИнтернетМагазины.Наименование ПОДОБНО &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнтернетМагазины.Наименование ПОДОБНО &Наименование УБЫВ,
	|	Номенклатура УБЫВ");
	Запрос.УстановитьПараметр("ИнтернетМагазин",	ИнтернетМагазинЯндекс());
	Запрос.УстановитьПараметр("Страна",				Страна);
	Запрос.УстановитьПараметр("Наименование",		"%wild%");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответ = Выборка.Ссылка;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ЭтоТест() Экспорт
	Ответ	= Ложь;
	Попытка
		Ответ	= (СтрНайти(НРег(ИспользуемоеИмяФайла), "\temp") = 0);
	Исключение КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ЗатраченоВремени(Знач Сколько) Экспорт
	Если Сколько < 1 Тогда Возврат Строка(Сколько) + " сек"; КонецЕсли;
	Ответ	= ВремяЧасть(Сколько, 4);
	Ответ	= СокрЛ(Ответ + " " + ВремяЧасть(Сколько, 3));
	Если СтрЧислоВхождений(Ответ, " ") < 2 Тогда
		Ответ	= СокрЛ(Ответ + " " + ВремяЧасть(Сколько, 2));
		Если СтрЧислоВхождений(Ответ, " ") < 2 Тогда
			Ответ = СокрЛП(Ответ + " " + ВремяЧасть(Сколько));
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ВремяЧасть(Сколько, Этап=1)
	Ответ = "";
	Если Этап = 4 И Сколько >= 86400 Тогда
		Ответ	= Формат(Цел(Сколько / 86400), "ЧГ=0") + " дн";
		Сколько	= Сколько - Цел(Сколько / 86400) * 86400;
	ИначеЕсли Этап = 3 И Сколько >= 3600 Тогда
		Ответ	= Ответ + Формат(Цел(Сколько / 3600), "ЧГ=0") + " час";
		Сколько	= Сколько - Цел(Сколько / 3600) * 3600;
	ИначеЕсли Этап = 2 И Сколько >= 60 Тогда
		Ответ	= Ответ + " " + Формат(Цел(Сколько / 60), "ЧГ=0") + " мин";
		Сколько	= Сколько - Цел(Сколько / 60) * 60;
	ИначеЕсли Этап = 1 И Сколько >= 1 Тогда
		Ответ	= Формат(Сколько, "ЧГ=0") + " сек";
	КонецЕсли;
	Возврат Ответ;
КонецФункции
